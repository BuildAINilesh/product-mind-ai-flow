diff --git a/original.ts b/original.ts
new file mode 100644
index 0000000..e69de29
diff --git a/src/App.tsx b/src/App.tsx
index b1ee8c7..0e94e5c 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,4 +1,3 @@
-
 import { Toaster } from "@/components/ui/toaster";
 import { Toaster as Sonner } from "@/components/ui/sonner";
 import { TooltipProvider } from "@/components/ui/tooltip";
@@ -32,7 +31,7 @@ import EditRequirement from "./pages/requirements/EditRequirement";
 import MarketSense from "./pages/dashboard/MarketSense";
 import RequirementValidator from "./pages/dashboard/RequirementValidator";
 import AICaseGenerator from "./pages/dashboard/AICaseGenerator";
-import SmartSignoff from "./pages/dashboard/SmartSignoff";
+import AISignoff from "./pages/dashboard/AISignoff";
 import Profile from "./pages/dashboard/Profile";
 
 // Add imports for Settings and Support
@@ -77,7 +76,7 @@ const App = () => (
                 <Route path="market-sense" element={<MarketSense />} />
                 <Route path="validator" element={<RequirementValidator />} />
                 <Route path="ai-cases" element={<AICaseGenerator />} />
-                <Route path="signoff" element={<SmartSignoff />} />
+                <Route path="signoff" element={<AISignoff />} />
                 <Route path="settings" element={<Settings />} />
                 <Route path="support" element={<Support />} />
                 <Route path="profile" element={<Profile />} />
diff --git a/src/components/DashboardSidebar.tsx b/src/components/DashboardSidebar.tsx
index 5aa01df..d00c470 100644
--- a/src/components/DashboardSidebar.tsx
+++ b/src/components/DashboardSidebar.tsx
@@ -1,35 +1,59 @@
-import { useState } from "react";
+
 import { Link, useLocation } from "react-router-dom";
+import { cn } from "@/lib/utils";
 import {
-  LayoutDashboard,
-  ListChecks,
-  BarChartBig,
+  FileText,
+  BarChart3,
+  CheckSquare,
+  AlertTriangle,
+  FileCheck,
+  ClipboardList,
   Settings,
   HelpCircle,
-  BrainCircuit,
-  Menu,
-  X,
+  Home,
+  Brain,
+  Layers,
+  Network,
+  CircuitBoard,
+  X
 } from "lucide-react";
+import { AIGradientText } from "./ui/ai-elements";
+import { Button } from "./ui/button";
 import { useIsMobile } from "@/hooks/use-mobile";
-import {
-  Sheet,
-  SheetContent,
-  SheetHeader,
-  SheetTitle,
-  SheetTrigger,
-} from "@/components/ui/sheet"
 
-const navigation = [
-  { name: 'Dashboard', href: '/dashboard', icon: LayoutDashboard },
-  { name: 'Requirements', href: '/dashboard/requirements', icon: ListChecks },
-  { name: 'MarketSense', href: '/dashboard/market-sense', icon: BarChartBig },
-  { name: 'Requirement Validator', href: '/dashboard/validator', icon: BrainCircuit },
-  { name: 'AI Case Generator', href: '/dashboard/ai-cases', icon: BrainCircuit },
-  { name: 'Test Generator', href: '/dashboard/test-gen', icon: BrainCircuit },
-  { name: 'SmartSignoff', href: '/dashboard/signoff', icon: ListChecks },
-  { name: 'Settings', href: '/dashboard/settings', icon: Settings },
-  { name: 'Help & Support', href: '/dashboard/support', icon: HelpCircle },
-];
+type NavItemProps = {
+  icon: React.ReactNode;
+  label: string;
+  href: string;
+  isActive?: boolean;
+  onClick?: () => void;
+};
+
+const NavItem = ({ icon, label, href, isActive, onClick }: NavItemProps) => (
+  <Link
+    to={href}
+    className={cn(
+      "flex items-center gap-3 px-3 py-2 rounded-md transition-colors relative group overflow-hidden",
+      isActive
+        ? "bg-sidebar-accent text-sidebar-accent-foreground before:absolute before:inset-0 before:opacity-20 before:bg-[radial-gradient(circle_at_center,_var(--sidebar-ring)_0%,_transparent_70%)]"
+        : "text-sidebar-foreground/70 hover:bg-sidebar-accent/50 hover:text-sidebar-accent-foreground"
+    )}
+    onClick={onClick}
+  >
+    <div
+      className={cn(
+        "w-6 h-6 flex items-center justify-center transition-all",
+        isActive && "text-sidebar-primary"
+      )}
+    >
+      {icon}
+    </div>
+    <span>{label}</span>
+    {isActive && (
+      <span className="absolute inset-y-0 left-0 w-0.5 bg-sidebar-primary" />
+    )}
+  </Link>
+);
 
 interface DashboardSidebarProps {
   isOpen: boolean;
@@ -38,58 +62,180 @@ interface DashboardSidebarProps {
 
 const DashboardSidebar = ({ isOpen, onToggle }: DashboardSidebarProps) => {
   const location = useLocation();
+  const currentPath = location.pathname;
   const isMobile = useIsMobile();
 
-  const renderSidebarContent = () => (
-    <div className="flex flex-col h-full">
-      <div className="px-4 py-6">
-        <Link to="/" className="flex items-center space-x-2">
-          <span className="text-lg font-bold">ForgeFlow</span>
-        </Link>
-      </div>
-      <div className="flex-grow p-4">
-        <ul className="space-y-2">
-          {navigation.map((item) => (
-            <li key={item.name}>
-              <Link
-                to={item.href}
-                className={`flex items-center space-x-3 p-3 rounded-md font-medium transition-colors hover:bg-muted ${location.pathname === item.href ? 'bg-muted' : ''}`}
-              >
-                <item.icon className="w-4 h-4" />
-                <span>{item.name}</span>
-              </Link>
-            </li>
-          ))}
-        </ul>
-      </div>
-      <div className="p-4">
-        <p className="text-xs text-muted-foreground">
-          Â© {new Date().getFullYear()} ForgeFlow. All rights reserved.
-        </p>
-      </div>
-    </div>
-  );
+  const navItems = [
+    {
+      icon: <Home size={18} />,
+      label: "Dashboard",
+      href: "/dashboard",
+    },
+    {
+      icon: <FileText size={18} />,
+      label: "Requirements",
+      href: "/dashboard/requirements",
+    },
+    {
+      icon: <BarChart3 size={18} />,
+      label: "MarketSense AI",
+      href: "/dashboard/market-sense",
+    },
+    {
+      icon: <Brain size={18} />,
+      label: "AI Validator",
+      href: "/dashboard/validator",
+    },
+    {
+      icon: <Network size={18} />,
+      label: "AI Case Generator",
+      href: "/dashboard/ai-cases",
+    },
+    {
+      icon: <CircuitBoard size={18} />,
+      label: "AI Signoff",
+      href: "/dashboard/signoff",
+    },
+  ];
 
-  if (!isMobile) {
+  const bottomNavItems = [
+    {
+      icon: <Settings size={18} />,
+      label: "Settings",
+      href: "/dashboard/settings",
+    },
+    {
+      icon: <HelpCircle size={18} />,
+      label: "Help & Support",
+      href: "/dashboard/support",
+    },
+  ];
+
+  // For mobile, show fixed position sidebar that can be toggled
+  if (isMobile) {
     return (
-      <aside className="fixed left-0 top-0 z-20 h-full w-64 flex-col border-r bg-background">
-        {renderSidebarContent()}
-      </aside>
+      <>
+        {/* Mobile sidebar backdrop */}
+        {isOpen && (
+          <div 
+            className="fixed inset-0 bg-black/50 z-30 md:hidden"
+            onClick={onToggle}
+          />
+        )}
+        
+        {/* Mobile sidebar */}
+        <aside className={cn(
+          "bg-sidebar w-64 min-h-screen fixed left-0 top-0 z-40 transition-transform duration-300 ease-in-out transform",
+          isOpen ? "translate-x-0" : "-translate-x-full"
+        )}>
+          <div className="relative">
+            <div className="absolute inset-0 bg-[radial-gradient(circle_at_15%_50%,_rgba(29,78,216,0.15),_transparent_80%)]"></div>
+            <div className="relative p-4 flex items-center justify-between">
+              <div className="flex items-center">
+                <div className="w-8 h-8 bg-gradient-to-br from-sidebar-primary to-secondary rounded-lg flex items-center justify-center relative overflow-hidden">
+                  <span className="text-white font-bold text-lg relative z-10">
+                    P
+                  </span>
+                  <div className="absolute inset-0 opacity-50 bg-[radial-gradient(circle_at_70%_70%,_rgba(255,255,255,0.2),_transparent_70%)]"></div>
+                </div>
+                <span className="ml-2 font-bold text-xl text-sidebar-foreground">
+                  Product<AIGradientText>Mind</AIGradientText>
+                </span>
+              </div>
+              <Button variant="ghost" size="icon" onClick={onToggle} className="text-sidebar-foreground">
+                <X size={18} />
+              </Button>
+            </div>
+          </div>
+
+          <div className="flex-1 px-3 py-4 overflow-y-auto">
+            <nav className="space-y-1">
+              {navItems.map((item) => (
+                <NavItem
+                  key={item.href}
+                  icon={item.icon}
+                  label={item.label}
+                  href={item.href}
+                  isActive={
+                    item.href === "/dashboard"
+                      ? currentPath === item.href
+                      : currentPath.startsWith(item.href)
+                  }
+                  onClick={onToggle}
+                />
+              ))}
+            </nav>
+          </div>
+
+          <div className="px-3 py-4 border-t border-sidebar-border">
+            <nav className="space-y-1">
+              {bottomNavItems.map((item) => (
+                <NavItem
+                  key={item.href}
+                  icon={item.icon}
+                  label={item.label}
+                  href={item.href}
+                  isActive={currentPath === item.href}
+                  onClick={onToggle}
+                />
+              ))}
+            </nav>
+          </div>
+        </aside>
+      </>
     );
   }
 
+  // Desktop sidebar
   return (
-    <Sheet open={isOpen} onOpenChange={onToggle}>
-      <SheetTrigger asChild>
-        <Menu className="md:hidden absolute left-4 top-4" />
-      </SheetTrigger>
-      <SheetContent side="left" className="w-64 p-0">
-        <SheetHeader className="border-b">
-          <SheetTitle>ForgeFlow</SheetTitle>
-        </SheetHeader>
-        {renderSidebarContent()}
-      </SheetContent>
-    </Sheet>
+    <aside className="bg-sidebar w-64 min-h-screen flex flex-col fixed left-0 top-0 z-30 hidden md:flex">
+      <div className="relative">
+        <div className="absolute inset-0 bg-[radial-gradient(circle_at_15%_50%,_rgba(29,78,216,0.15),_transparent_80%)]"></div>
+        <div className="relative p-4 flex items-center">
+          <div className="w-8 h-8 bg-gradient-to-br from-sidebar-primary to-secondary rounded-lg flex items-center justify-center relative overflow-hidden">
+            <span className="text-white font-bold text-lg relative z-10">
+              P
+            </span>
+            <div className="absolute inset-0 opacity-50 bg-[radial-gradient(circle_at_70%_70%,_rgba(255,255,255,0.2),_transparent_70%)]"></div>
+          </div>
+          <span className="ml-2 font-bold text-xl text-sidebar-foreground">
+            Product<AIGradientText>Mind</AIGradientText>
+          </span>
+        </div>
+      </div>
+
+      <div className="flex-1 px-3 py-4 overflow-y-auto">
+        <nav className="space-y-1">
+          {navItems.map((item) => (
+            <NavItem
+              key={item.href}
+              icon={item.icon}
+              label={item.label}
+              href={item.href}
+              isActive={
+                item.href === "/dashboard"
+                  ? currentPath === item.href
+                  : currentPath.startsWith(item.href)
+              }
+            />
+          ))}
+        </nav>
+      </div>
+
+      <div className="px-3 py-4 border-t border-sidebar-border">
+        <nav className="space-y-1">
+          {bottomNavItems.map((item) => (
+            <NavItem
+              key={item.href}
+              icon={item.icon}
+              label={item.label}
+              href={item.href}
+              isActive={currentPath === item.href}
+            />
+          ))}
+        </nav>
+      </div>
+    </aside>
   );
 };
 
diff --git a/src/components/ai-cases/AICaseGeneratorDetails.tsx b/src/components/ai-cases/AICaseGeneratorDetails.tsx
index d724fc8..2537540 100644
--- a/src/components/ai-cases/AICaseGeneratorDetails.tsx
+++ b/src/components/ai-cases/AICaseGeneratorDetails.tsx
@@ -1,4 +1,3 @@
-
 import React, { useState } from "react";
 import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
 import { Tabs } from "@/components/ui/tabs";
@@ -58,7 +57,7 @@ const AICaseGeneratorDetails: React.FC<AICaseGeneratorDetailsProps> = ({
     if (!validateGenerationDependencies(type, statusData)) {
       return;
     }
-    
+
     handleGenerate(type);
   };
 
@@ -93,9 +92,10 @@ const AICaseGeneratorDetails: React.FC<AICaseGeneratorDetailsProps> = ({
 
   return (
     <div className="space-y-6">
-      <AICaseGeneratorHeader 
-        isGenerating={isGenerating} 
-        handleGenerateAll={handleGenerateAll} 
+      <AICaseGeneratorHeader
+        isGenerating={isGenerating}
+        handleGenerateAll={handleGenerateAll}
+        requirementId={requirementId}
       />
 
       {/* Requirement Info */}
@@ -103,14 +103,14 @@ const AICaseGeneratorDetails: React.FC<AICaseGeneratorDetailsProps> = ({
 
       {/* Tabs */}
       <Tabs value={activeTab} onValueChange={setActiveTab}>
-        <AICaseTabNavigation 
+        <AICaseTabNavigation
           activeTab={activeTab}
           userStoriesStatus={statusData.userStoriesStatus}
           useCasesStatus={statusData.useCasesStatus}
           testCasesStatus={statusData.testCasesStatus}
         />
 
-        <AICaseTabContent 
+        <AICaseTabContent
           userStories={userStories}
           useCases={useCases}
           testCases={testCases}
diff --git a/src/components/ai-cases/header/AICaseGeneratorHeader.tsx b/src/components/ai-cases/header/AICaseGeneratorHeader.tsx
index bed4b77..c1e65ad 100644
--- a/src/components/ai-cases/header/AICaseGeneratorHeader.tsx
+++ b/src/components/ai-cases/header/AICaseGeneratorHeader.tsx
@@ -1,19 +1,101 @@
-
 import React from "react";
-import { Link } from "react-router-dom";
+import { Link, useNavigate } from "react-router-dom";
 import { Button } from "@/components/ui/button";
-import { ArrowLeftIcon, RefreshCw } from "lucide-react";
+import {
+  ArrowLeftIcon,
+  RefreshCw,
+  Clipboard,
+  ClipboardCheck,
+} from "lucide-react";
 import Loader from "@/components/shared/Loader";
+import { supabase } from "@/integrations/supabase/client";
+import { toast } from "sonner";
 
 interface AICaseGeneratorHeaderProps {
   isGenerating: boolean;
   handleGenerateAll: () => void;
+  requirementId: string;
 }
 
 const AICaseGeneratorHeader: React.FC<AICaseGeneratorHeaderProps> = ({
   isGenerating,
   handleGenerateAll,
+  requirementId,
 }) => {
+  const navigate = useNavigate();
+  const [isMovingToSignoff, setIsMovingToSignoff] = React.useState(false);
+
+  const handleMoveToSignoff = async () => {
+    if (!requirementId) {
+      toast.error("Requirement ID is missing");
+      return;
+    }
+
+    setIsMovingToSignoff(true);
+
+    try {
+      console.log("Moving requirement to AI Signoff:", requirementId);
+
+      // Check if a signoff record already exists
+      const { data: existingData, error: checkError } = await supabase
+        .from("requirement_brd")
+        .select("id")
+        .eq("requirement_id", requirementId)
+        .maybeSingle();
+
+      if (checkError) {
+        console.error("Error checking for existing record:", checkError);
+        toast.error(
+          `Failed to check existing AI Signoff record: ${checkError.message}`
+        );
+        setIsMovingToSignoff(false);
+        return;
+      }
+
+      // If no record exists, create one
+      if (!existingData) {
+        console.log("No existing record found, creating new one");
+
+        // Simpler direct insert with error logging
+        const { data, error: insertError } = await supabase
+          .from("requirement_brd")
+          .insert({
+            requirement_id: requirementId,
+            status: "draft",
+            brd_document: {}, // Add empty object as default value for brd_document
+          })
+          .select();
+
+        if (insertError) {
+          console.error("Error creating AI Signoff record:", insertError);
+          toast.error(
+            `Failed to create AI Signoff record: ${insertError.message}`
+          );
+          setIsMovingToSignoff(false);
+          return;
+        }
+
+        console.log("Created AI Signoff record:", data);
+        toast.success("Requirement moved to AI Signoff");
+      } else {
+        console.log("AI Signoff record already exists");
+        toast.info("Requirement already in AI Signoff");
+      }
+
+      // Navigate to the AI Signoff page for this requirement
+      navigate(
+        `/dashboard/signoff?requirementId=${encodeURIComponent(requirementId)}`
+      );
+    } catch (error: unknown) {
+      console.error("Error in AI Signoff process:", error);
+      const errorMessage =
+        error instanceof Error ? error.message : "Unknown error";
+      toast.error(`Failed to move requirement to AI Signoff: ${errorMessage}`);
+    } finally {
+      setIsMovingToSignoff(false);
+    }
+  };
+
   return (
     <div className="flex items-center justify-between">
       <div className="flex items-center space-x-2">
@@ -25,24 +107,44 @@ const AICaseGeneratorHeader: React.FC<AICaseGeneratorHeaderProps> = ({
         </Link>
         <h1 className="text-2xl font-bold">AI Case Analysis</h1>
       </div>
-      <Button
-        variant="default"
-        disabled={isGenerating}
-        onClick={handleGenerateAll}
-        className="flex items-center space-x-2"
-      >
-        {isGenerating ? (
-          <>
-            <Loader size="small" />
-            <span>Generating...</span>
-          </>
-        ) : (
-          <>
-            <RefreshCw className="h-4 w-4" />
-            <span>Generate All</span>
-          </>
-        )}
-      </Button>
+      <div className="flex gap-2">
+        <Button
+          variant="outline"
+          disabled={isMovingToSignoff}
+          onClick={handleMoveToSignoff}
+          className="flex items-center gap-2"
+        >
+          {isMovingToSignoff ? (
+            <>
+              <Loader size="small" />
+              <span>Moving to Signoff...</span>
+            </>
+          ) : (
+            <>
+              <ClipboardCheck className="h-4 w-4" />
+              <span>Move to AI Signoff</span>
+            </>
+          )}
+        </Button>
+        <Button
+          variant="default"
+          disabled={isGenerating}
+          onClick={handleGenerateAll}
+          className="flex items-center gap-2"
+        >
+          {isGenerating ? (
+            <>
+              <Loader size="small" />
+              <span>Generating...</span>
+            </>
+          ) : (
+            <>
+              <RefreshCw className="h-4 w-4" />
+              <span>Generate All</span>
+            </>
+          )}
+        </Button>
+      </div>
     </div>
   );
 };
diff --git a/src/components/signoff/AISignoffDashboard.tsx b/src/components/signoff/AISignoffDashboard.tsx
new file mode 100644
index 0000000..e625183
--- /dev/null
+++ b/src/components/signoff/AISignoffDashboard.tsx
@@ -0,0 +1,204 @@
+import React from "react";
+import { Link } from "react-router-dom";
+import { Card } from "@/components/ui/card";
+import {
+  Table,
+  TableBody,
+  TableCell,
+  TableHead,
+  TableHeader,
+  TableRow,
+} from "@/components/ui/table";
+import { Badge } from "@/components/ui/badge";
+import { SearchIcon } from "@/components/icons";
+import { Check, FileText, ClipboardCheck, AlertTriangle } from "lucide-react";
+import Loader from "@/components/shared/Loader";
+import EmptyState from "@/components/shared/EmptyState";
+
+interface SignoffItem {
+  id: string;
+  requirementId: string;
+  reqId: string | null;
+  projectName: string;
+  industry: string;
+  created: string;
+  status: string;
+  reviewerComments: string | null;
+}
+
+interface AISignoffDashboardProps {
+  signoffItems: SignoffItem[];
+  loading: boolean;
+  dataFetchAttempted: boolean;
+}
+
+const AISignoffDashboard: React.FC<AISignoffDashboardProps> = ({
+  signoffItems,
+  loading,
+  dataFetchAttempted,
+}) => {
+  console.log("AISignoffDashboard rendering with props:", {
+    itemsCount: signoffItems.length,
+    loading,
+    dataFetchAttempted,
+  });
+
+  // Calculate summary statistics
+  const totalItems = signoffItems.length;
+
+  const approvedItems = signoffItems.filter(
+    (item) => item.status === "Approved"
+  ).length;
+
+  const pendingItems = signoffItems.filter(
+    (item) => item.status === "Pending"
+  ).length;
+
+  const rejectedItems = signoffItems.filter(
+    (item) => item.status === "Rejected"
+  ).length;
+
+  // Status badge renderer
+  const renderStatusBadge = (status: string) => {
+    if (!status) return <Badge variant="secondary">Pending</Badge>;
+
+    status = status.toLowerCase();
+    if (status === "approved" || status === "signed_off") {
+      return <Badge variant="success">Approved</Badge>;
+    } else if (status === "pending" || status === "draft") {
+      return <Badge variant="warning">Pending</Badge>;
+    } else if (status === "rejected") {
+      return <Badge variant="destructive">Rejected</Badge>;
+    } else if (status === "review" || status === "ready") {
+      return <Badge variant="secondary">Under Review</Badge>;
+    } else if (status === "error") {
+      return <Badge variant="destructive">Error</Badge>;
+    }
+    return <Badge variant="secondary">{status}</Badge>;
+  };
+
+  return (
+    <div className="space-y-6">
+      <div>
+        <h1 className="text-2xl font-bold">AI Signoff</h1>
+        <p className="text-slate-500">
+          AI-powered requirement signoff management with comprehensive review
+          and approval workflow
+        </p>
+      </div>
+
+      {/* Summary Cards */}
+      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
+        <Card className="p-4">
+          <div className="flex items-center space-x-2">
+            <FileText className="h-6 w-6 text-blue-600" />
+            <span className="text-sm font-medium">Total Requirements</span>
+          </div>
+          <h2 className="text-3xl font-bold mt-2">{totalItems}</h2>
+        </Card>
+
+        <Card className="p-4">
+          <div className="flex items-center space-x-2">
+            <Check className="h-6 w-6 text-green-600" />
+            <span className="text-sm font-medium">Approved</span>
+          </div>
+          <h2 className="text-3xl font-bold mt-2">{approvedItems}</h2>
+        </Card>
+
+        <Card className="p-4">
+          <div className="flex items-center space-x-2">
+            <ClipboardCheck className="h-6 w-6 text-amber-600" />
+            <span className="text-sm font-medium">Pending</span>
+          </div>
+          <h2 className="text-3xl font-bold mt-2">{pendingItems}</h2>
+        </Card>
+
+        <Card className="p-4">
+          <div className="flex items-center space-x-2">
+            <AlertTriangle className="h-6 w-6 text-red-600" />
+            <span className="text-sm font-medium">Rejected</span>
+          </div>
+          <h2 className="text-3xl font-bold mt-2">{rejectedItems}</h2>
+        </Card>
+      </div>
+
+      <div className="bg-white rounded-lg shadow">
+        <div className="p-6">
+          <h2 className="text-xl font-semibold mb-2">Requirement Signoffs</h2>
+          <p className="text-slate-500 mb-4">
+            View and manage signoff status for your requirements
+          </p>
+
+          <div className="mb-4">
+            <div className="relative">
+              <SearchIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400" />
+              <input
+                type="text"
+                placeholder="Search signoffs..."
+                className="pl-10 pr-4 py-2 border rounded-md w-full"
+              />
+            </div>
+          </div>
+
+          {loading ? (
+            <div className="flex justify-center py-8">
+              <Loader size="large" />
+            </div>
+          ) : !dataFetchAttempted || signoffItems.length === 0 ? (
+            <EmptyState
+              title="No signoffs yet"
+              description="Select a requirement to begin the signoff process."
+              icon={<FileText className="h-12 w-12" />}
+            />
+          ) : (
+            <div className="overflow-x-auto">
+              <Table>
+                <TableHeader>
+                  <TableRow>
+                    <TableHead className="whitespace-nowrap">
+                      Requirement ID
+                    </TableHead>
+                    <TableHead className="whitespace-nowrap">Project</TableHead>
+                    <TableHead className="whitespace-nowrap">
+                      Industry
+                    </TableHead>
+                    <TableHead className="whitespace-nowrap">Created</TableHead>
+                    <TableHead className="whitespace-nowrap">Status</TableHead>
+                    <TableHead className="whitespace-nowrap">Action</TableHead>
+                  </TableRow>
+                </TableHeader>
+                <TableBody>
+                  {signoffItems.map((item) => (
+                    <TableRow key={item.id}>
+                      <TableCell className="whitespace-nowrap">
+                        {item.reqId || "N/A"}
+                      </TableCell>
+                      <TableCell className="max-w-[150px] truncate">
+                        {item.projectName}
+                      </TableCell>
+                      <TableCell>{item.industry}</TableCell>
+                      <TableCell className="whitespace-nowrap">
+                        {item.created}
+                      </TableCell>
+                      <TableCell>{renderStatusBadge(item.status)}</TableCell>
+                      <TableCell>
+                        <Link
+                          to={`/dashboard/signoff?requirementId=${item.requirementId}`}
+                          className="px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700"
+                        >
+                          View Details
+                        </Link>
+                      </TableCell>
+                    </TableRow>
+                  ))}
+                </TableBody>
+              </Table>
+            </div>
+          )}
+        </div>
+      </div>
+    </div>
+  );
+};
+
+export default AISignoffDashboard;
diff --git a/src/components/signoff/BRDDisplay.tsx b/src/components/signoff/BRDDisplay.tsx
new file mode 100644
index 0000000..8252a7b
--- /dev/null
+++ b/src/components/signoff/BRDDisplay.tsx
@@ -0,0 +1,618 @@
+import React from "react";
+import {
+  Card,
+  CardContent,
+  CardHeader,
+  CardTitle,
+  CardFooter,
+} from "@/components/ui/card";
+import { Badge } from "@/components/ui/badge";
+import {
+  Accordion,
+  AccordionContent,
+  AccordionItem,
+  AccordionTrigger,
+} from "@/components/ui/accordion";
+import {
+  FileText,
+  AlertTriangle,
+  BookOpen,
+  Target,
+  Users,
+  Globe,
+  CheckCircle,
+  User,
+  Layers,
+  FlaskConical,
+  AlertCircle,
+  ThumbsUp,
+  PanelRight,
+  Download,
+  RefreshCw,
+  Calendar,
+  MessageSquare,
+} from "lucide-react";
+import { Button } from "@/components/ui/button";
+import { Separator } from "@/components/ui/separator";
+import { format } from "date-fns";
+
+export interface BRDData {
+  id: string;
+  requirement_id: string;
+  project_overview: string;
+  problem_statement: string;
+  proposed_solution: string;
+  key_features: string;
+  business_goals: string;
+  target_audience: string;
+  market_research_summary: string;
+  validation_summary: string;
+  user_stories_summary: string[];
+  use_cases_summary: string[];
+  total_tests: number;
+  functional_tests: number;
+  edge_tests: number;
+  negative_tests: number;
+  integration_tests: number;
+  risks_and_mitigations: string[];
+  final_recommendation: string;
+  ai_signoff_confidence: number;
+  status: "draft" | "ready" | "signed_off" | "rejected" | "error";
+  approver_name: string | null;
+  approver_comment: string | null;
+  signed_off_at: string | null;
+  created_at: string;
+  updated_at: string;
+}
+
+interface BRDDisplayProps {
+  brdData: BRDData;
+  projectName?: string;
+  onRegenerate?: () => void;
+  onExport?: () => void;
+  onSignOff?: () => void;
+  onReject?: () => void;
+}
+
+export const BRDDisplay: React.FC<BRDDisplayProps> = ({
+  brdData,
+  projectName,
+  onRegenerate,
+  onExport,
+  onSignOff,
+  onReject,
+}) => {
+  // Render status badge
+  const renderStatusBadge = (status: string) => {
+    const normalizedStatus = status.toLowerCase();
+    if (normalizedStatus === "signed_off") {
+      return <Badge variant="success">Signed Off</Badge>;
+    } else if (normalizedStatus === "draft") {
+      return <Badge variant="warning">Draft</Badge>;
+    } else if (normalizedStatus === "rejected") {
+      return <Badge variant="destructive">Rejected</Badge>;
+    } else if (normalizedStatus === "ready") {
+      return <Badge variant="secondary">Ready for Review</Badge>;
+    } else if (normalizedStatus === "error") {
+      return <Badge variant="destructive">Error</Badge>;
+    }
+    return <Badge variant="secondary">{status}</Badge>;
+  };
+
+  // Format text with line breaks
+  const formatText = (text: string) => {
+    return text.split("\n").map((line, index) => (
+      <React.Fragment key={index}>
+        {line}
+        {index < text.split("\n").length - 1 && <br />}
+      </React.Fragment>
+    ));
+  };
+
+  return (
+    <div className="space-y-6">
+      {/* Header */}
+      <Card className="bg-gradient-to-r from-slate-50 to-blue-50 border-blue-200">
+        <CardHeader className="pb-2">
+          <div className="flex justify-between items-center">
+            <div>
+              <CardTitle className="text-2xl">
+                Business Requirements Document
+              </CardTitle>
+              <p className="text-slate-500">
+                {projectName || "Project"} â¢ Last updated{" "}
+                {format(new Date(brdData.updated_at), "MMM d, yyyy")}
+              </p>
+            </div>
+            <div className="flex items-center gap-2">
+              {renderStatusBadge(brdData.status)}
+              <Badge
+                variant={
+                  brdData.ai_signoff_confidence >= 80
+                    ? "success"
+                    : brdData.ai_signoff_confidence >= 60
+                    ? "secondary"
+                    : "warning"
+                }
+                className="flex items-center gap-1"
+              >
+                <ThumbsUp className="h-3 w-3" />
+                {brdData.ai_signoff_confidence}% AI Confidence
+              </Badge>
+            </div>
+          </div>
+        </CardHeader>
+      </Card>
+
+      {/* Main content with sidebar navigation (desktop) */}
+      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
+        {/* Sidebar Navigation (desktop only) */}
+        <div className="hidden md:block">
+          <Card>
+            <CardHeader>
+              <CardTitle className="text-sm">Navigate</CardTitle>
+            </CardHeader>
+            <CardContent className="space-y-2 p-2">
+              <a
+                href="#overview"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <BookOpen className="h-4 w-4 mr-2 text-blue-500" />
+                Project Overview
+              </a>
+              <a
+                href="#problem"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <AlertCircle className="h-4 w-4 mr-2 text-amber-500" />
+                Problem Statement
+              </a>
+              <a
+                href="#solution"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <CheckCircle className="h-4 w-4 mr-2 text-green-500" />
+                Proposed Solution
+              </a>
+              <a
+                href="#features"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <FileText className="h-4 w-4 mr-2 text-indigo-500" />
+                Key Features
+              </a>
+              <a
+                href="#goals"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <Target className="h-4 w-4 mr-2 text-red-500" />
+                Business Goals
+              </a>
+              <a
+                href="#audience"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <Users className="h-4 w-4 mr-2 text-purple-500" />
+                Target Audience
+              </a>
+              <a
+                href="#market"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <Globe className="h-4 w-4 mr-2 text-cyan-500" />
+                Market Research
+              </a>
+              <a
+                href="#validation"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <CheckCircle className="h-4 w-4 mr-2 text-emerald-500" />
+                Validation Summary
+              </a>
+              <a
+                href="#stories"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <User className="h-4 w-4 mr-2 text-teal-500" />
+                User Stories
+              </a>
+              <a
+                href="#cases"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <Layers className="h-4 w-4 mr-2 text-violet-500" />
+                Use Cases
+              </a>
+              <a
+                href="#tests"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <FlaskConical className="h-4 w-4 mr-2 text-blue-500" />
+                Test Coverage
+              </a>
+              <a
+                href="#risks"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <AlertTriangle className="h-4 w-4 mr-2 text-orange-500" />
+                Risks & Mitigation
+              </a>
+              <a
+                href="#recommendation"
+                className="flex items-center p-2 rounded-md hover:bg-slate-100 text-sm font-medium"
+              >
+                <ThumbsUp className="h-4 w-4 mr-2 text-sky-500" />
+                Final Recommendation
+              </a>
+            </CardContent>
+          </Card>
+        </div>
+
+        {/* Main Content */}
+        <div className="md:col-span-3 space-y-6">
+          <Accordion
+            type="single"
+            collapsible
+            className="w-full"
+            defaultValue="overview"
+          >
+            {/* Project Overview */}
+            <AccordionItem value="overview" id="overview">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <BookOpen className="h-5 w-5 mr-2 text-blue-500" />
+                  Project Overview
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <div className="prose max-w-none">
+                  {formatText(brdData.project_overview)}
+                </div>
+              </AccordionContent>
+            </AccordionItem>
+
+            {/* Problem Statement */}
+            <AccordionItem value="problem" id="problem">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <AlertCircle className="h-5 w-5 mr-2 text-amber-500" />
+                  Problem Statement
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <div className="prose max-w-none">
+                  {formatText(brdData.problem_statement)}
+                </div>
+              </AccordionContent>
+            </AccordionItem>
+
+            {/* Proposed Solution */}
+            <AccordionItem value="solution" id="solution">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <CheckCircle className="h-5 w-5 mr-2 text-green-500" />
+                  Proposed Solution
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <div className="prose max-w-none">
+                  {formatText(brdData.proposed_solution)}
+                </div>
+              </AccordionContent>
+            </AccordionItem>
+
+            {/* Key Features */}
+            <AccordionItem value="features" id="features">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <FileText className="h-5 w-5 mr-2 text-indigo-500" />
+                  Key Features
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <div className="prose max-w-none">
+                  {formatText(brdData.key_features)}
+                </div>
+              </AccordionContent>
+            </AccordionItem>
+
+            {/* Business Goals */}
+            <AccordionItem value="goals" id="goals">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <Target className="h-5 w-5 mr-2 text-red-500" />
+                  Business Goals
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <div className="prose max-w-none">
+                  {formatText(brdData.business_goals)}
+                </div>
+              </AccordionContent>
+            </AccordionItem>
+
+            {/* Target Audience */}
+            <AccordionItem value="audience" id="audience">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <Users className="h-5 w-5 mr-2 text-purple-500" />
+                  Target Audience
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <div className="prose max-w-none">
+                  {formatText(brdData.target_audience)}
+                </div>
+              </AccordionContent>
+            </AccordionItem>
+
+            {/* Market Research Summary */}
+            <AccordionItem value="market" id="market">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <Globe className="h-5 w-5 mr-2 text-cyan-500" />
+                  Market Research Summary
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <div className="prose max-w-none">
+                  {formatText(brdData.market_research_summary)}
+                </div>
+              </AccordionContent>
+            </AccordionItem>
+
+            {/* Validation Summary */}
+            <AccordionItem value="validation" id="validation">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <CheckCircle className="h-5 w-5 mr-2 text-emerald-500" />
+                  Validation Summary
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <div className="prose max-w-none">
+                  {formatText(brdData.validation_summary)}
+                </div>
+              </AccordionContent>
+            </AccordionItem>
+
+            {/* User Stories */}
+            <AccordionItem value="stories" id="stories">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <User className="h-5 w-5 mr-2 text-teal-500" />
+                  User Stories
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <ul className="list-disc pl-5 space-y-2">
+                  {brdData.user_stories_summary.map((story, index) => (
+                    <li key={index} className="text-slate-700">
+                      {story}
+                    </li>
+                  ))}
+                </ul>
+              </AccordionContent>
+            </AccordionItem>
+
+            {/* Use Cases */}
+            <AccordionItem value="cases" id="cases">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <Layers className="h-5 w-5 mr-2 text-violet-500" />
+                  Use Cases
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <ul className="list-disc pl-5 space-y-2">
+                  {brdData.use_cases_summary.map((useCase, index) => (
+                    <li key={index} className="text-slate-700">
+                      {useCase}
+                    </li>
+                  ))}
+                </ul>
+              </AccordionContent>
+            </AccordionItem>
+
+            {/* Test Coverage */}
+            <AccordionItem value="tests" id="tests">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <FlaskConical className="h-5 w-5 mr-2 text-blue-500" />
+                  Test Coverage
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
+                  <div className="bg-slate-50 p-3 rounded-md border border-slate-200 flex flex-col items-center">
+                    <span className="text-xs text-slate-500">Total</span>
+                    <Badge
+                      variant="default"
+                      className="mt-1 text-lg font-bold h-8 flex items-center"
+                    >
+                      {brdData.total_tests}
+                    </Badge>
+                  </div>
+                  <div className="bg-slate-50 p-3 rounded-md border border-slate-200 flex flex-col items-center">
+                    <span className="text-xs text-slate-500">Functional</span>
+                    <Badge
+                      variant="success"
+                      className="mt-1 text-lg font-bold h-8 flex items-center"
+                    >
+                      {brdData.functional_tests}
+                    </Badge>
+                  </div>
+                  <div className="bg-slate-50 p-3 rounded-md border border-slate-200 flex flex-col items-center">
+                    <span className="text-xs text-slate-500">Edge Cases</span>
+                    <Badge
+                      variant="warning"
+                      className="mt-1 text-lg font-bold h-8 flex items-center"
+                    >
+                      {brdData.edge_tests}
+                    </Badge>
+                  </div>
+                  <div className="bg-slate-50 p-3 rounded-md border border-slate-200 flex flex-col items-center">
+                    <span className="text-xs text-slate-500">Negative</span>
+                    <Badge
+                      variant="destructive"
+                      className="mt-1 text-lg font-bold h-8 flex items-center"
+                    >
+                      {brdData.negative_tests}
+                    </Badge>
+                  </div>
+                  <div className="bg-slate-50 p-3 rounded-md border border-slate-200 flex flex-col items-center">
+                    <span className="text-xs text-slate-500">Integration</span>
+                    <Badge
+                      variant="secondary"
+                      className="mt-1 text-lg font-bold h-8 flex items-center"
+                    >
+                      {brdData.integration_tests}
+                    </Badge>
+                  </div>
+                </div>
+              </AccordionContent>
+            </AccordionItem>
+
+            {/* Risks & Mitigation */}
+            <AccordionItem value="risks" id="risks">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <AlertTriangle className="h-5 w-5 mr-2 text-orange-500" />
+                  Risks & Mitigation
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <div className="bg-amber-50 border border-amber-200 rounded-md p-4 mb-4">
+                  <div className="flex items-center text-amber-700 mb-2">
+                    <AlertTriangle className="h-5 w-5 mr-2" />
+                    <h3 className="font-medium">
+                      Identified Risks & Mitigation Strategies
+                    </h3>
+                  </div>
+                  <ul className="list-disc pl-5 space-y-2 text-amber-800">
+                    {brdData.risks_and_mitigations.map((risk, index) => (
+                      <li key={index}>{risk}</li>
+                    ))}
+                  </ul>
+                </div>
+              </AccordionContent>
+            </AccordionItem>
+
+            {/* Final Recommendation */}
+            <AccordionItem value="recommendation" id="recommendation">
+              <AccordionTrigger className="text-lg font-semibold">
+                <div className="flex items-center">
+                  <ThumbsUp className="h-5 w-5 mr-2 text-sky-500" />
+                  Final Recommendation
+                </div>
+              </AccordionTrigger>
+              <AccordionContent className="pt-4 px-4">
+                <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
+                  <div className="prose max-w-none text-blue-800">
+                    {formatText(brdData.final_recommendation)}
+                  </div>
+                </div>
+              </AccordionContent>
+            </AccordionItem>
+          </Accordion>
+        </div>
+      </div>
+
+      {/* Sign-off Metadata Footer */}
+      <Card className="border-t-4 border-t-slate-300">
+        <CardHeader className="pb-2">
+          <CardTitle className="text-lg">Sign-off Information</CardTitle>
+        </CardHeader>
+        <CardContent>
+          {brdData.status === "signed_off" && brdData.approver_name ? (
+            <div className="space-y-3">
+              <div className="flex items-center">
+                <User className="h-5 w-5 text-slate-400 mr-2" />
+                <span className="font-medium mr-2">Approved by:</span>
+                <span>{brdData.approver_name}</span>
+              </div>
+              {brdData.signed_off_at && (
+                <div className="flex items-center">
+                  <Calendar className="h-5 w-5 text-slate-400 mr-2" />
+                  <span className="font-medium mr-2">Signed off on:</span>
+                  <span>{format(new Date(brdData.signed_off_at), "PPP")}</span>
+                </div>
+              )}
+              {brdData.approver_comment && (
+                <div>
+                  <div className="flex items-center mb-2">
+                    <MessageSquare className="h-5 w-5 text-slate-400 mr-2" />
+                    <span className="font-medium">Comment:</span>
+                  </div>
+                  <div className="bg-slate-50 p-3 rounded-md border border-slate-200">
+                    {brdData.approver_comment}
+                  </div>
+                </div>
+              )}
+            </div>
+          ) : brdData.status === "rejected" && brdData.approver_name ? (
+            <div className="space-y-3">
+              <div className="flex items-center">
+                <User className="h-5 w-5 text-slate-400 mr-2" />
+                <span className="font-medium mr-2">Rejected by:</span>
+                <span>{brdData.approver_name}</span>
+              </div>
+              {brdData.signed_off_at && (
+                <div className="flex items-center">
+                  <Calendar className="h-5 w-5 text-slate-400 mr-2" />
+                  <span className="font-medium mr-2">Rejected on:</span>
+                  <span>{format(new Date(brdData.signed_off_at), "PPP")}</span>
+                </div>
+              )}
+              {brdData.approver_comment && (
+                <div>
+                  <div className="flex items-center mb-2">
+                    <MessageSquare className="h-5 w-5 text-slate-400 mr-2" />
+                    <span className="font-medium">Reason:</span>
+                  </div>
+                  <div className="bg-red-50 p-3 rounded-md border border-red-200 text-red-800">
+                    {brdData.approver_comment}
+                  </div>
+                </div>
+              )}
+            </div>
+          ) : (
+            <div className="text-slate-500 italic">
+              This document has not been signed off yet.
+            </div>
+          )}
+        </CardContent>
+        <CardFooter className="border-t pt-4 flex flex-wrap justify-end gap-3">
+          {onExport && (
+            <Button variant="outline" onClick={onExport}>
+              <Download className="h-4 w-4 mr-2" />
+              Export
+            </Button>
+          )}
+          {onRegenerate && brdData.status !== "signed_off" && (
+            <Button variant="outline" onClick={onRegenerate}>
+              <RefreshCw className="h-4 w-4 mr-2" />
+              Regenerate
+            </Button>
+          )}
+          {onReject && brdData.status === "ready" && (
+            <Button variant="destructive" onClick={onReject}>
+              Reject
+            </Button>
+          )}
+          {onSignOff && brdData.status === "ready" && (
+            <Button
+              variant="success"
+              className="bg-green-600 hover:bg-green-700 text-white"
+              onClick={onSignOff}
+            >
+              Sign Off
+            </Button>
+          )}
+        </CardFooter>
+      </Card>
+    </div>
+  );
+};
+
+export default BRDDisplay;
diff --git a/src/components/smart-signoff/AISignoffHeader.tsx b/src/components/smart-signoff/AISignoffHeader.tsx
deleted file mode 100644
index 6de09e2..0000000
--- a/src/components/smart-signoff/AISignoffHeader.tsx
+++ /dev/null
@@ -1,60 +0,0 @@
-
-import { Button } from "@/components/ui/button";
-import { FileCheck, Filter } from "lucide-react";
-import { BRDRequirement } from "@/types/smart-signoff";
-
-interface AISignoffHeaderProps {
-  pendingCount: number;
-  onFilterChange?: (filter: string) => void;
-}
-
-export const AISignoffHeader = ({ 
-  pendingCount,
-  onFilterChange 
-}: AISignoffHeaderProps) => {
-  return (
-    <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
-      <div>
-        <div className="flex items-center gap-2">
-          <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center">
-            <FileCheck className="h-4 w-4 text-primary" />
-          </div>
-          <h1 className="text-2xl font-bold">AI Signoff</h1>
-        </div>
-        <p className="text-muted-foreground mt-1">
-          {pendingCount} requirement{pendingCount !== 1 ? 's' : ''} pending approval
-        </p>
-      </div>
-      
-      <div className="flex gap-2">
-        <Button
-          variant="outline"
-          size="sm"
-          className="flex items-center gap-1"
-          onClick={() => onFilterChange && onFilterChange('all')}
-        >
-          <Filter className="h-4 w-4" />
-          All
-        </Button>
-        <Button
-          variant="outline"
-          size="sm"
-          className="flex items-center gap-1"
-          onClick={() => onFilterChange && onFilterChange('pending')}
-        >
-          <Filter className="h-4 w-4" />
-          Pending
-        </Button>
-        <Button
-          variant="outline"
-          size="sm" 
-          className="flex items-center gap-1"
-          onClick={() => onFilterChange && onFilterChange('approved')}
-        >
-          <Filter className="h-4 w-4" />
-          Approved
-        </Button>
-      </div>
-    </div>
-  );
-};
diff --git a/src/components/smart-signoff/AISignoffStats.tsx b/src/components/smart-signoff/AISignoffStats.tsx
deleted file mode 100644
index 61dc16d..0000000
--- a/src/components/smart-signoff/AISignoffStats.tsx
+++ /dev/null
@@ -1,75 +0,0 @@
-
-import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
-import { BRDRequirement } from "@/types/smart-signoff";
-
-interface AISignoffStatsProps {
-  requirements: BRDRequirement[];
-}
-
-export const AISignoffStats = ({ requirements }: AISignoffStatsProps) => {
-  // Calculate stats
-  const totalRequirements = requirements.length;
-  const pendingApproval = requirements.filter(req => req.status === "ready").length;
-  const approved = requirements.filter(req => req.status === "signed_off").length;
-  const rejected = requirements.filter(req => req.status === "rejected").length;
-  const draftRequirements = requirements.filter(req => req.status === "draft").length;
-  
-  // Calculate average quality score
-  const avgQualityScore = requirements.length > 0
-    ? Math.round(
-        requirements.reduce((acc, req) => acc + req.qualityScore, 0) / requirements.length
-      )
-    : 0;
-
-  return (
-    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-6">
-      <Card>
-        <CardHeader className="pb-2">
-          <CardTitle className="text-sm font-medium text-muted-foreground">
-            Total Requirements
-          </CardTitle>
-        </CardHeader>
-        <CardContent>
-          <div className="text-2xl font-bold">{totalRequirements}</div>
-        </CardContent>
-      </Card>
-      
-      <Card>
-        <CardHeader className="pb-2">
-          <CardTitle className="text-sm font-medium text-muted-foreground">
-            Pending Approval
-          </CardTitle>
-        </CardHeader>
-        <CardContent>
-          <div className="text-2xl font-bold">{pendingApproval}</div>
-        </CardContent>
-      </Card>
-      
-      <Card>
-        <CardHeader className="pb-2">
-          <CardTitle className="text-sm font-medium text-muted-foreground">
-            Approval Rate
-          </CardTitle>
-        </CardHeader>
-        <CardContent>
-          <div className="text-2xl font-bold">
-            {totalRequirements > 0 
-              ? Math.round((approved / (approved + rejected)) * 100) || 0
-              : 0}%
-          </div>
-        </CardContent>
-      </Card>
-      
-      <Card>
-        <CardHeader className="pb-2">
-          <CardTitle className="text-sm font-medium text-muted-foreground">
-            Avg Quality Score
-          </CardTitle>
-        </CardHeader>
-        <CardContent>
-          <div className="text-2xl font-bold">{avgQualityScore}%</div>
-        </CardContent>
-      </Card>
-    </div>
-  );
-};
diff --git a/src/components/smart-signoff/AISignoffTable.tsx b/src/components/smart-signoff/AISignoffTable.tsx
deleted file mode 100644
index f84d72d..0000000
--- a/src/components/smart-signoff/AISignoffTable.tsx
+++ /dev/null
@@ -1,127 +0,0 @@
-
-import { useState } from "react";
-import { Clock, Check, X, AlertTriangle } from "lucide-react";
-import {
-  Table,
-  TableBody,
-  TableCell,
-  TableHead,
-  TableHeader,
-  TableRow,
-} from "@/components/ui/table";
-import { Badge } from "@/components/ui/badge";
-import { Button } from "@/components/ui/button";
-import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
-import { BRDRequirement } from "@/types/smart-signoff";
-
-interface AISignoffTableProps {
-  requirements: BRDRequirement[];
-  onViewDetails: (requirement: BRDRequirement) => void;
-}
-
-export const AISignoffTable = ({ 
-  requirements,
-  onViewDetails
-}: AISignoffTableProps) => {
-  // Filter to show only requirements that need signoff (ready status)
-  const pendingSignoffs = requirements.filter(req => 
-    req.status === "ready" || req.status === "draft"
-  );
-
-  const getStatusBadgeVariant = (status: "draft" | "ready" | "signed_off" | "rejected") => {
-    switch (status) {
-      case "signed_off": return "success";
-      case "rejected": return "destructive";
-      case "ready": return "outline";
-      default: return "secondary";
-    }
-  };
-
-  return (
-    <div className="rounded-md border">
-      <Table>
-        <TableHeader>
-          <TableRow>
-            <TableHead>Requirement</TableHead>
-            <TableHead>ID</TableHead>
-            <TableHead>Status</TableHead>
-            <TableHead>Quality</TableHead>
-            <TableHead>Stakeholders</TableHead>
-            <TableHead>Updated</TableHead>
-            <TableHead className="text-right">Action</TableHead>
-          </TableRow>
-        </TableHeader>
-        <TableBody>
-          {pendingSignoffs.length === 0 ? (
-            <TableRow>
-              <TableCell colSpan={7} className="h-24 text-center">
-                <div className="flex flex-col items-center justify-center text-muted-foreground">
-                  <AlertTriangle className="h-10 w-10 mb-2" />
-                  <p>No requirements pending signoff</p>
-                </div>
-              </TableCell>
-            </TableRow>
-          ) : (
-            pendingSignoffs.map((req) => (
-              <TableRow key={req.id} className="group hover:bg-muted/50">
-                <TableCell className="font-medium">{req.title}</TableCell>
-                <TableCell>
-                  <code className="text-xs bg-muted px-1 py-0.5 rounded">
-                    {req.req_id}
-                  </code>
-                </TableCell>
-                <TableCell>
-                  <Badge variant={getStatusBadgeVariant(req.status)}>
-                    {req.status.charAt(0).toUpperCase() + req.status.slice(1)}
-                  </Badge>
-                </TableCell>
-                <TableCell>
-                  <div className="flex items-center">
-                    <div className={`h-2 w-8 rounded-full mr-2 ${
-                      req.qualityScore >= 90 ? "bg-green-500" :
-                      req.qualityScore >= 70 ? "bg-yellow-500" :
-                      "bg-red-500"
-                    }`} />
-                    <span className="text-xs">{req.qualityScore}%</span>
-                  </div>
-                </TableCell>
-                <TableCell>
-                  <div className="flex -space-x-2">
-                    {req.stakeholders.slice(0, 3).map((stakeholder) => (
-                      <Avatar key={stakeholder.id} className="h-6 w-6 border-2 border-background">
-                        <AvatarImage src={stakeholder.avatar} />
-                        <AvatarFallback className="text-xs">
-                          {stakeholder.name.split(' ').map(n => n[0]).join('')}
-                        </AvatarFallback>
-                      </Avatar>
-                    ))}
-                    {req.stakeholders.length > 3 && (
-                      <div className="h-6 w-6 rounded-full bg-muted flex items-center justify-center text-xs border-2 border-background">
-                        +{req.stakeholders.length - 3}
-                      </div>
-                    )}
-                  </div>
-                </TableCell>
-                <TableCell>
-                  <div className="flex items-center text-xs text-muted-foreground">
-                    <Clock className="h-3 w-3 mr-1" />
-                    {req.lastUpdated}
-                  </div>
-                </TableCell>
-                <TableCell className="text-right">
-                  <Button 
-                    variant="ghost" 
-                    size="sm"
-                    onClick={() => onViewDetails(req)}
-                  >
-                    View
-                  </Button>
-                </TableCell>
-              </TableRow>
-            ))
-          )}
-        </TableBody>
-      </Table>
-    </div>
-  );
-};
diff --git a/src/components/smart-signoff/CommentsSection.tsx b/src/components/smart-signoff/CommentsSection.tsx
deleted file mode 100644
index e034188..0000000
--- a/src/components/smart-signoff/CommentsSection.tsx
+++ /dev/null
@@ -1,38 +0,0 @@
-
-import { Calendar, MessageSquare } from "lucide-react";
-
-interface Comment {
-  id: number;
-  user: string;
-  message: string;
-  date: string;
-}
-
-interface CommentsSectionProps {
-  comments: Comment[];
-}
-
-export const CommentsSection = ({ comments }: CommentsSectionProps) => {
-  return (
-    <div>
-      <div className="flex items-center mb-2">
-        <MessageSquare className="h-4 w-4 mr-1" />
-        <h3 className="text-sm font-medium">Comments</h3>
-      </div>
-      <div className="space-y-3">
-        {comments.map((comment) => (
-          <div key={comment.id} className="bg-muted/50 rounded-md p-3">
-            <div className="flex items-center justify-between mb-1">
-              <p className="text-sm font-medium">{comment.user}</p>
-              <div className="flex items-center text-xs text-muted-foreground">
-                <Calendar className="h-3 w-3 mr-1" />
-                {comment.date}
-              </div>
-            </div>
-            <p className="text-sm">{comment.message}</p>
-          </div>
-        ))}
-      </div>
-    </div>
-  );
-};
diff --git a/src/components/smart-signoff/EmptyRequirementState.tsx b/src/components/smart-signoff/EmptyRequirementState.tsx
deleted file mode 100644
index 1966d90..0000000
--- a/src/components/smart-signoff/EmptyRequirementState.tsx
+++ /dev/null
@@ -1,19 +0,0 @@
-
-import { FileCheck } from "lucide-react";
-import { Card, CardContent } from "@/components/ui/card";
-
-export const EmptyRequirementState = () => {
-  return (
-    <Card>
-      <CardContent className="p-8 flex flex-col items-center justify-center text-center">
-        <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4">
-          <FileCheck className="h-8 w-8 text-primary" />
-        </div>
-        <h3 className="text-lg font-semibold mb-2">Select a Requirement</h3>
-        <p className="text-muted-foreground max-w-md">
-          Choose a requirement from the list to view details and approve or reject it.
-        </p>
-      </CardContent>
-    </Card>
-  );
-};
diff --git a/src/components/smart-signoff/RequirementDetails.tsx b/src/components/smart-signoff/RequirementDetails.tsx
deleted file mode 100644
index 76da1a9..0000000
--- a/src/components/smart-signoff/RequirementDetails.tsx
+++ /dev/null
@@ -1,131 +0,0 @@
-
-import { Badge } from "@/components/ui/badge";
-import { Button } from "@/components/ui/button";
-import { Progress } from "@/components/ui/progress";
-import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
-import { Check, X, FileText, Clock, AlertCircle } from "lucide-react";
-import { StakeholderList } from "./StakeholderList";
-import { CommentsSection } from "./CommentsSection";
-import { BRDRequirement } from "@/types/smart-signoff";
-
-interface RequirementDetailsProps {
-  requirement: BRDRequirement;
-  onApprove: (requirementId: string) => Promise<void>;
-  onReject: (requirementId: string) => Promise<void>;
-  onViewBRD: (requirementId: string) => void;
-}
-
-export const RequirementDetails = ({
-  requirement,
-  onApprove,
-  onReject,
-  onViewBRD,
-}: RequirementDetailsProps) => {
-  return (
-    <Card>
-      <CardHeader>
-        <div className="flex items-center justify-between">
-          <div>
-            <div className="flex items-center gap-2">
-              <CardTitle>{requirement.title}</CardTitle>
-              <Badge variant={
-                requirement.status === "signed_off" ? "success" :
-                requirement.status === "rejected" ? "destructive" :
-                requirement.status === "ready" ? "outline" : "secondary"
-              }>
-                {requirement.status.charAt(0).toUpperCase() + requirement.status.slice(1)}
-              </Badge>
-            </div>
-            <CardDescription className="mt-1">
-              {requirement.req_id}
-            </CardDescription>
-          </div>
-          
-          <div className="flex gap-2">
-            <Button
-              variant="outline"
-              size="sm"
-              className="flex items-center gap-1"
-              onClick={() => onViewBRD(requirement.id)}
-            >
-              <FileText className="h-4 w-4" />
-              View BRD
-            </Button>
-
-            {requirement.status === "ready" && (
-              <>
-                <Button 
-                  variant="outline" 
-                  size="sm"
-                  className="flex items-center gap-1"
-                  onClick={() => onReject(requirement.id)}
-                >
-                  <X className="h-4 w-4" />
-                  Reject
-                </Button>
-                <Button 
-                  size="sm"
-                  className="flex items-center gap-1"
-                  onClick={() => onApprove(requirement.id)}
-                >
-                  <Check className="h-4 w-4" />
-                  Approve
-                </Button>
-              </>
-            )}
-          </div>
-        </div>
-      </CardHeader>
-      <CardContent className="space-y-4">
-        <div>
-          <h3 className="text-sm font-medium mb-1">Description</h3>
-          <p className="text-sm text-muted-foreground">
-            {requirement.description}
-          </p>
-        </div>
-        
-        <div>
-          <div className="flex items-center justify-between mb-2">
-            <h3 className="text-sm font-medium">Quality Score</h3>
-            <span className="text-sm font-medium">
-              {requirement.qualityScore}/100
-            </span>
-          </div>
-          <Progress 
-            value={requirement.qualityScore} 
-            className="h-2"
-            indicatorClassName={`${
-              requirement.qualityScore >= 90 ? "bg-green-500" :
-              requirement.qualityScore >= 70 ? "bg-yellow-500" :
-              "bg-red-500"
-            }`}
-          />
-          
-          {requirement.status === "draft" && (
-            <div className="mt-2 flex items-center gap-1 text-xs bg-amber-50 text-amber-700 p-2 rounded border border-amber-200">
-              <AlertCircle className="h-3 w-3" />
-              <span>BRD is in draft state. Consider finalizing before submitting for approval.</span>
-            </div>
-          )}
-        </div>
-        
-        <StakeholderList stakeholders={requirement.stakeholders} />
-        
-        <CommentsSection comments={requirement.comments} />
-        
-        <div className="flex items-center justify-between text-xs text-muted-foreground pt-2">
-          <div className="flex items-center">
-            <Clock className="h-3 w-3 mr-1" />
-            Last updated: {requirement.lastUpdated}
-          </div>
-          {requirement.status === "signed_off" && (
-            <div className="flex items-center">
-              <Check className="h-3 w-3 mr-1 text-green-500" />
-              Approved
-            </div>
-          )}
-        </div>
-      </CardContent>
-    </Card>
-  );
-};
diff --git a/src/components/smart-signoff/RequirementsList.tsx b/src/components/smart-signoff/RequirementsList.tsx
deleted file mode 100644
index ca61c8d..0000000
--- a/src/components/smart-signoff/RequirementsList.tsx
+++ /dev/null
@@ -1,81 +0,0 @@
-
-import { useState } from "react";
-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
-import { Badge } from "@/components/ui/badge";
-import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
-import { BRDRequirement } from "@/types/smart-signoff";
-
-interface RequirementsListProps {
-  requirements: BRDRequirement[];
-  selectedRequirement: BRDRequirement | null;
-  onSelectRequirement: (requirement: BRDRequirement) => void;
-}
-
-export const RequirementsList = ({
-  requirements,
-  selectedRequirement,
-  onSelectRequirement,
-}: RequirementsListProps) => {
-  return (
-    <Card>
-      <CardHeader>
-        <CardTitle>Requirements</CardTitle>
-        <CardDescription>
-          Requirements pending approval
-        </CardDescription>
-      </CardHeader>
-      <CardContent>
-        <div className="space-y-4">
-          {requirements.map((req) => (
-            <div 
-              key={req.id}
-              className={`p-3 border rounded-md cursor-pointer transition-colors ${
-                selectedRequirement?.id === req.id 
-                  ? "bg-primary/5 border-primary/30" 
-                  : "hover:bg-muted"
-              }`}
-              onClick={() => onSelectRequirement(req)}
-            >
-              <div className="flex items-center justify-between">
-                <div>
-                  <h4 className="font-medium text-sm">{req.title}</h4>
-                  <div className="flex items-center gap-2 mt-1">
-                    <code className="text-xs bg-muted px-1 py-0.5 rounded">{req.req_id}</code>
-                    <Badge variant={
-                      req.status === "signed_off" ? "default" :
-                      req.status === "rejected" ? "destructive" :
-                      req.status === "ready" ? "outline" : "secondary"
-                    }>
-                      {req.status.charAt(0).toUpperCase() + req.status.slice(1)}
-                    </Badge>
-                  </div>
-                </div>
-              </div>
-              
-              <div className="mt-2 flex items-center gap-1">
-                <div className="flex -space-x-2">
-                  {req.stakeholders.slice(0, 3).map((stakeholder) => (
-                    <Avatar key={stakeholder.id} className="h-6 w-6 border-2 border-background">
-                      <AvatarImage src={stakeholder.avatar} />
-                      <AvatarFallback className="text-xs">
-                        {stakeholder.name.split(' ').map(n => n[0]).join('')}
-                      </AvatarFallback>
-                    </Avatar>
-                  ))}
-                  {req.stakeholders.length > 3 && (
-                    <div className="h-6 w-6 rounded-full bg-muted flex items-center justify-center text-xs border-2 border-background">
-                      +{req.stakeholders.length - 3}
-                    </div>
-                  )}
-                </div>
-                <span className="text-xs text-muted-foreground ml-1">
-                  {req.stakeholders.filter(s => s.approved).length}/{req.stakeholders.length} approved
-                </span>
-              </div>
-            </div>
-          ))}
-        </div>
-      </CardContent>
-    </Card>
-  );
-};
diff --git a/src/components/smart-signoff/StakeholderList.tsx b/src/components/smart-signoff/StakeholderList.tsx
deleted file mode 100644
index 28ba5e2..0000000
--- a/src/components/smart-signoff/StakeholderList.tsx
+++ /dev/null
@@ -1,53 +0,0 @@
-
-import { Badge } from "@/components/ui/badge";
-import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
-import { Check } from "lucide-react";
-
-interface Stakeholder {
-  id: number;
-  name: string;
-  role: string;
-  approved: boolean;
-  avatar: string;
-}
-
-interface StakeholderListProps {
-  stakeholders: Stakeholder[];
-}
-
-export const StakeholderList = ({ stakeholders }: StakeholderListProps) => {
-  return (
-    <div>
-      <h3 className="text-sm font-medium mb-2">Stakeholder Approval</h3>
-      <div className="space-y-3">
-        {stakeholders.map((stakeholder) => (
-          <div key={stakeholder.id} className="flex items-center justify-between">
-            <div className="flex items-center gap-3">
-              <Avatar className="h-8 w-8">
-                <AvatarImage src={stakeholder.avatar} />
-                <AvatarFallback>
-                  {stakeholder.name.split(' ').map((n) => n[0]).join('')}
-                </AvatarFallback>
-              </Avatar>
-              <div>
-                <p className="text-sm font-medium">{stakeholder.name}</p>
-                <p className="text-xs text-muted-foreground">{stakeholder.role}</p>
-              </div>
-            </div>
-            <div>
-              {stakeholder.approved ? (
-                <Badge variant="outline" className="bg-green-50 text-green-700 hover:bg-green-50 border-green-200">
-                  <Check className="mr-1 h-3 w-3" /> Approved
-                </Badge>
-              ) : (
-                <Badge variant="outline" className="bg-muted text-muted-foreground">
-                  Pending
-                </Badge>
-              )}
-            </div>
-          </div>
-        ))}
-      </div>
-    </div>
-  );
-};
diff --git a/src/hooks/useSignoff.ts b/src/hooks/useSignoff.ts
new file mode 100644
index 0000000..2970b5e
--- /dev/null
+++ b/src/hooks/useSignoff.ts
@@ -0,0 +1,218 @@
+import { useState, useEffect, useCallback } from "react";
+import { supabase } from "@/integrations/supabase/client";
+import { useToast } from "@/components/ui/use-toast";
+import type { Tables } from "@/integrations/supabase/types";
+
+interface SignoffItem {
+  id: string;
+  requirementId: string;
+  reqId: string | null;
+  projectName: string;
+  industry: string;
+  created: string;
+  status: string;
+  reviewerComments: string | null;
+}
+
+type RequirementData = Tables<"requirements">;
+type SignoffDetails = Tables<"requirement_brd">;
+
+// Define the data we expect from the join
+interface SignoffJoinResult {
+  id: string;
+  requirement_id: string;
+  status: string;
+  reviewer_comments: string | null;
+  created_at: string;
+  requirements: {
+    id: string;
+    req_id: string | null;
+    project_name: string;
+    industry_type: string;
+  } | null;
+}
+
+export const useSignoff = (requirementId?: string | null) => {
+  const [signoffItems, setSignoffItems] = useState<SignoffItem[]>([]);
+  const [loading, setLoading] = useState<boolean>(true);
+  const [requirement, setRequirement] = useState<RequirementData | null>(null);
+  const [signoffDetails, setSignoffDetails] = useState<SignoffDetails | null>(
+    null
+  );
+  const [isRequirementLoading, setIsRequirementLoading] =
+    useState<boolean>(true);
+  const [dataFetchAttempted, setDataFetchAttempted] = useState<boolean>(false);
+  const [refreshTimestamp, setRefreshTimestamp] = useState<number>(Date.now());
+  const { toast } = useToast();
+
+  // Function to force a refresh of the data
+  const refreshData = useCallback(() => {
+    console.log("Forcing refresh of signoff data");
+    setRefreshTimestamp(Date.now());
+  }, []);
+
+  // Fetch the signoff items for the dashboard
+  useEffect(() => {
+    const fetchSignoffItems = async () => {
+      setLoading(true);
+      console.log("Fetching signoff items at:", new Date().toISOString());
+
+      try {
+        // Try a basic query first just to check connection
+        const { data: testData, error: testError } = await supabase
+          .from("requirements")
+          .select("id")
+          .limit(1);
+
+        if (testError) {
+          console.error("Database connection test failed:", testError);
+          throw testError;
+        }
+
+        console.log("Database connection test successful");
+
+        // Now fetch brd data directly - try simpler approach with minimal data
+        const result = await supabase
+          .from("requirement_brd")
+          .select("id, requirement_id, status, created_at");
+
+        if (result.error) {
+          console.error("Error fetching requirement_brd:", result.error);
+          throw result.error;
+        }
+
+        console.log("Successfully fetched BRD data:", result.data);
+
+        // If we have results, try to get the requirement data for each
+        if (result.data && result.data.length > 0) {
+          // Get all requirement IDs
+          const reqIds = result.data.map((item) => item.requirement_id);
+
+          // Fetch requirement details
+          const reqResult = await supabase
+            .from("requirements")
+            .select("id, req_id, project_name, industry_type")
+            .in("id", reqIds);
+
+          if (reqResult.error) {
+            console.error("Error fetching requirements:", reqResult.error);
+            throw reqResult.error;
+          }
+
+          // Create a map for lookups
+          interface RequirementInfo {
+            id: string;
+            req_id?: string | null;
+            project_name?: string;
+            industry_type?: string;
+          }
+          const reqMap: Record<string, RequirementInfo> = {};
+          reqResult.data?.forEach((req) => {
+            reqMap[req.id] = req;
+          });
+
+          // Format the data
+          const formatted = result.data.map((item) => ({
+            id: item.id,
+            requirementId: item.requirement_id,
+            reqId: reqMap[item.requirement_id]?.req_id || null,
+            projectName: reqMap[item.requirement_id]?.project_name || "Unknown",
+            industry: reqMap[item.requirement_id]?.industry_type || "Unknown",
+            created: new Date(item.created_at).toLocaleDateString(),
+            status: item.status || "draft",
+            reviewerComments: null,
+          }));
+
+          setSignoffItems(formatted);
+        } else {
+          setSignoffItems([]);
+        }
+
+        setDataFetchAttempted(true);
+      } catch (error: unknown) {
+        console.error("Error fetching signoff items:", error);
+        const errorMessage =
+          error instanceof Error
+            ? error.message
+            : "Failed to load signoff data";
+        toast({
+          title: "Error fetching signoff data",
+          description: errorMessage,
+          variant: "destructive",
+        });
+      } finally {
+        setLoading(false);
+      }
+    };
+
+    fetchSignoffItems();
+  }, [toast, refreshTimestamp]);
+
+  // Fetch specific requirement and its signoff details if requirementId is provided
+  useEffect(() => {
+    if (!requirementId) {
+      setIsRequirementLoading(false);
+      return;
+    }
+
+    const fetchRequirementDetails = async () => {
+      setIsRequirementLoading(true);
+
+      try {
+        // Fetch the requirement
+        const { data: reqData, error: reqError } = await supabase
+          .from("requirements")
+          .select("*")
+          .eq("id", requirementId)
+          .single();
+
+        if (reqError) {
+          throw reqError;
+        }
+
+        setRequirement(reqData);
+
+        // Fetch the signoff details for this requirement
+        const { data: signoffData, error: signoffError } = await supabase
+          .from("requirement_brd")
+          .select("*")
+          .eq("requirement_id", requirementId)
+          .single();
+
+        if (signoffError && signoffError.code !== "PGRST116") {
+          // PGRST116 is "not found"
+          throw signoffError;
+        }
+
+        setSignoffDetails(signoffData || null);
+        setDataFetchAttempted(true);
+      } catch (error: unknown) {
+        console.error("Error fetching requirement details:", error);
+        const err = error as { code?: string; message?: string };
+        if (err.code !== "PGRST116") {
+          // Don't show error for "not found"
+          const errorMessage = err.message || "Failed to load requirement data";
+          toast({
+            title: "Error fetching requirement details",
+            description: errorMessage,
+            variant: "destructive",
+          });
+        }
+      } finally {
+        setIsRequirementLoading(false);
+      }
+    };
+
+    fetchRequirementDetails();
+  }, [requirementId, toast, refreshTimestamp]);
+
+  return {
+    signoffItems,
+    loading,
+    requirement,
+    signoffDetails,
+    isRequirementLoading,
+    dataFetchAttempted,
+    refreshData,
+  };
+};
diff --git a/src/integrations/supabase/types.ts b/src/integrations/supabase/types.ts
index 89eefe8..8beecd6 100644
--- a/src/integrations/supabase/types.ts
+++ b/src/integrations/supabase/types.ts
@@ -4,631 +4,633 @@ export type Json =
   | boolean
   | null
   | { [key: string]: Json | undefined }
-  | Json[]
+  | Json[];
 
 export type Database = {
   public: {
     Tables: {
       case_generator: {
         Row: {
-          created_at: string | null
-          id: string
-          requirement_id: string | null
+          created_at: string | null;
+          id: string;
+          requirement_id: string | null;
           test_cases_status:
             | Database["public"]["Enums"]["requirement_status_enum"]
-            | null
-          updated_at: string | null
+            | null;
+          updated_at: string | null;
           use_cases_status:
             | Database["public"]["Enums"]["requirement_status_enum"]
-            | null
+            | null;
           user_stories_status:
             | Database["public"]["Enums"]["requirement_status_enum"]
-            | null
-        }
+            | null;
+        };
         Insert: {
-          created_at?: string | null
-          id?: string
-          requirement_id?: string | null
+          created_at?: string | null;
+          id?: string;
+          requirement_id?: string | null;
           test_cases_status?:
             | Database["public"]["Enums"]["requirement_status_enum"]
-            | null
-          updated_at?: string | null
+            | null;
+          updated_at?: string | null;
           use_cases_status?:
             | Database["public"]["Enums"]["requirement_status_enum"]
-            | null
+            | null;
           user_stories_status?:
             | Database["public"]["Enums"]["requirement_status_enum"]
-            | null
-        }
+            | null;
+        };
         Update: {
-          created_at?: string | null
-          id?: string
-          requirement_id?: string | null
+          created_at?: string | null;
+          id?: string;
+          requirement_id?: string | null;
           test_cases_status?:
             | Database["public"]["Enums"]["requirement_status_enum"]
-            | null
-          updated_at?: string | null
+            | null;
+          updated_at?: string | null;
           use_cases_status?:
             | Database["public"]["Enums"]["requirement_status_enum"]
-            | null
+            | null;
           user_stories_status?:
             | Database["public"]["Enums"]["requirement_status_enum"]
-            | null
-        }
+            | null;
+        };
         Relationships: [
           {
-            foreignKeyName: "forgeflow_requirement_id_fkey"
-            columns: ["requirement_id"]
-            isOneToOne: true
-            referencedRelation: "requirements"
-            referencedColumns: ["id"]
-          },
-        ]
-      }
+            foreignKeyName: "forgeflow_requirement_id_fkey";
+            columns: ["requirement_id"];
+            isOneToOne: true;
+            referencedRelation: "requirements";
+            referencedColumns: ["id"];
+          }
+        ];
+      };
       firecrawl_queries: {
         Row: {
-          created_at: string
-          id: string
-          query: string
-          requirement_id: string
-          status: string
-        }
+          created_at: string;
+          id: string;
+          query: string;
+          requirement_id: string;
+          status: string;
+        };
         Insert: {
-          created_at?: string
-          id?: string
-          query: string
-          requirement_id: string
-          status: string
-        }
+          created_at?: string;
+          id?: string;
+          query: string;
+          requirement_id: string;
+          status: string;
+        };
         Update: {
-          created_at?: string
-          id?: string
-          query?: string
-          requirement_id?: string
-          status?: string
-        }
+          created_at?: string;
+          id?: string;
+          query?: string;
+          requirement_id?: string;
+          status?: string;
+        };
         Relationships: [
           {
-            foreignKeyName: "firecrawl_queries_requirement_id_fkey"
-            columns: ["requirement_id"]
-            isOneToOne: false
-            referencedRelation: "requirements"
-            referencedColumns: ["id"]
-          },
-        ]
-      }
+            foreignKeyName: "firecrawl_queries_requirement_id_fkey";
+            columns: ["requirement_id"];
+            isOneToOne: false;
+            referencedRelation: "requirements";
+            referencedColumns: ["id"];
+          }
+        ];
+      };
       market_analysis: {
         Row: {
-          confidence_score: number | null
-          created_at: string | null
-          demand_insights: string | null
-          id: string
-          industry_benchmarks: string | null
-          market_gap_opportunity: string | null
-          market_trends: string | null
-          requirement_id: string | null
-          status: Database["public"]["Enums"]["requirement_status_enum"] | null
-          swot_analysis: string | null
-          top_competitors: string | null
-          updated_at: string | null
-        }
+          confidence_score: number | null;
+          created_at: string | null;
+          demand_insights: string | null;
+          id: string;
+          industry_benchmarks: string | null;
+          market_gap_opportunity: string | null;
+          market_trends: string | null;
+          requirement_id: string | null;
+          status: Database["public"]["Enums"]["requirement_status_enum"] | null;
+          swot_analysis: string | null;
+          top_competitors: string | null;
+          updated_at: string | null;
+        };
         Insert: {
-          confidence_score?: number | null
-          created_at?: string | null
-          demand_insights?: string | null
-          id?: string
-          industry_benchmarks?: string | null
-          market_gap_opportunity?: string | null
-          market_trends?: string | null
-          requirement_id?: string | null
-          status?: Database["public"]["Enums"]["requirement_status_enum"] | null
-          swot_analysis?: string | null
-          top_competitors?: string | null
-          updated_at?: string | null
-        }
+          confidence_score?: number | null;
+          created_at?: string | null;
+          demand_insights?: string | null;
+          id?: string;
+          industry_benchmarks?: string | null;
+          market_gap_opportunity?: string | null;
+          market_trends?: string | null;
+          requirement_id?: string | null;
+          status?:
+            | Database["public"]["Enums"]["requirement_status_enum"]
+            | null;
+          swot_analysis?: string | null;
+          top_competitors?: string | null;
+          updated_at?: string | null;
+        };
         Update: {
-          confidence_score?: number | null
-          created_at?: string | null
-          demand_insights?: string | null
-          id?: string
-          industry_benchmarks?: string | null
-          market_gap_opportunity?: string | null
-          market_trends?: string | null
-          requirement_id?: string | null
-          status?: Database["public"]["Enums"]["requirement_status_enum"] | null
-          swot_analysis?: string | null
-          top_competitors?: string | null
-          updated_at?: string | null
-        }
+          confidence_score?: number | null;
+          created_at?: string | null;
+          demand_insights?: string | null;
+          id?: string;
+          industry_benchmarks?: string | null;
+          market_gap_opportunity?: string | null;
+          market_trends?: string | null;
+          requirement_id?: string | null;
+          status?:
+            | Database["public"]["Enums"]["requirement_status_enum"]
+            | null;
+          swot_analysis?: string | null;
+          top_competitors?: string | null;
+          updated_at?: string | null;
+        };
         Relationships: [
           {
-            foreignKeyName: "market_analysis_requirement_id_fkey"
-            columns: ["requirement_id"]
-            isOneToOne: true
-            referencedRelation: "requirements"
-            referencedColumns: ["id"]
-          },
-        ]
-      }
+            foreignKeyName: "market_analysis_requirement_id_fkey";
+            columns: ["requirement_id"];
+            isOneToOne: true;
+            referencedRelation: "requirements";
+            referencedColumns: ["id"];
+          }
+        ];
+      };
       market_research_sources: {
         Row: {
-          created_at: string
-          id: string
-          query_id: string
-          requirement_id: string
-          snippet: string | null
+          created_at: string;
+          id: string;
+          query_id: string;
+          requirement_id: string;
+          snippet: string | null;
           status:
             | Database["public"]["Enums"]["market_research_source_status"]
-            | null
-          title: string
-          url: string
-        }
+            | null;
+          title: string;
+          url: string;
+        };
         Insert: {
-          created_at?: string
-          id?: string
-          query_id: string
-          requirement_id: string
-          snippet?: string | null
+          created_at?: string;
+          id?: string;
+          query_id: string;
+          requirement_id: string;
+          snippet?: string | null;
           status?:
             | Database["public"]["Enums"]["market_research_source_status"]
-            | null
-          title: string
-          url: string
-        }
+            | null;
+          title: string;
+          url: string;
+        };
         Update: {
-          created_at?: string
-          id?: string
-          query_id?: string
-          requirement_id?: string
-          snippet?: string | null
+          created_at?: string;
+          id?: string;
+          query_id?: string;
+          requirement_id?: string;
+          snippet?: string | null;
           status?:
             | Database["public"]["Enums"]["market_research_source_status"]
-            | null
-          title?: string
-          url?: string
-        }
+            | null;
+          title?: string;
+          url?: string;
+        };
         Relationships: [
           {
-            foreignKeyName: "market_research_sources_query_id_fkey"
-            columns: ["query_id"]
-            isOneToOne: false
-            referencedRelation: "firecrawl_queries"
-            referencedColumns: ["id"]
+            foreignKeyName: "market_research_sources_query_id_fkey";
+            columns: ["query_id"];
+            isOneToOne: false;
+            referencedRelation: "firecrawl_queries";
+            referencedColumns: ["id"];
           },
           {
-            foreignKeyName: "market_research_sources_requirement_id_fkey"
-            columns: ["requirement_id"]
-            isOneToOne: false
-            referencedRelation: "requirements"
-            referencedColumns: ["id"]
-          },
-        ]
-      }
+            foreignKeyName: "market_research_sources_requirement_id_fkey";
+            columns: ["requirement_id"];
+            isOneToOne: false;
+            referencedRelation: "requirements";
+            referencedColumns: ["id"];
+          }
+        ];
+      };
       profiles: {
         Row: {
-          avatar_url: string | null
-          created_at: string
-          full_name: string | null
-          id: string
-          updated_at: string
-          username: string | null
-        }
+          avatar_url: string | null;
+          created_at: string;
+          full_name: string | null;
+          id: string;
+          updated_at: string;
+          username: string | null;
+        };
         Insert: {
-          avatar_url?: string | null
-          created_at?: string
-          full_name?: string | null
-          id: string
-          updated_at?: string
-          username?: string | null
-        }
+          avatar_url?: string | null;
+          created_at?: string;
+          full_name?: string | null;
+          id: string;
+          updated_at?: string;
+          username?: string | null;
+        };
         Update: {
-          avatar_url?: string | null
-          created_at?: string
-          full_name?: string | null
-          id?: string
-          updated_at?: string
-          username?: string | null
-        }
-        Relationships: []
-      }
+          avatar_url?: string | null;
+          created_at?: string;
+          full_name?: string | null;
+          id?: string;
+          updated_at?: string;
+          username?: string | null;
+        };
+        Relationships: [];
+      };
       requirement_analysis: {
         Row: {
-          acceptance_criteria: string | null
-          analysis_confidence_score: number | null
-          appendices: string[] | null
-          business_goals: string | null
-          competitive_landscape: string | null
-          constraints_assumptions: string | null
-          created_at: string
-          id: string
-          key_features: string | null
-          problem_statement: string | null
-          project_overview: string | null
-          proposed_solution: string | null
-          requirement_id: string
-          risks_mitigations: string | null
-          target_audience: string | null
-          updated_at: string
-          user_stories: string | null
-        }
+          acceptance_criteria: string | null;
+          analysis_confidence_score: number | null;
+          appendices: string[] | null;
+          business_goals: string | null;
+          competitive_landscape: string | null;
+          constraints_assumptions: string | null;
+          created_at: string;
+          id: string;
+          key_features: string | null;
+          problem_statement: string | null;
+          project_overview: string | null;
+          proposed_solution: string | null;
+          requirement_id: string;
+          risks_mitigations: string | null;
+          target_audience: string | null;
+          updated_at: string;
+          user_stories: string | null;
+        };
         Insert: {
-          acceptance_criteria?: string | null
-          analysis_confidence_score?: number | null
-          appendices?: string[] | null
-          business_goals?: string | null
-          competitive_landscape?: string | null
-          constraints_assumptions?: string | null
-          created_at?: string
-          id?: string
-          key_features?: string | null
-          problem_statement?: string | null
-          project_overview?: string | null
-          proposed_solution?: string | null
-          requirement_id: string
-          risks_mitigations?: string | null
-          target_audience?: string | null
-          updated_at?: string
-          user_stories?: string | null
-        }
+          acceptance_criteria?: string | null;
+          analysis_confidence_score?: number | null;
+          appendices?: string[] | null;
+          business_goals?: string | null;
+          competitive_landscape?: string | null;
+          constraints_assumptions?: string | null;
+          created_at?: string;
+          id?: string;
+          key_features?: string | null;
+          problem_statement?: string | null;
+          project_overview?: string | null;
+          proposed_solution?: string | null;
+          requirement_id: string;
+          risks_mitigations?: string | null;
+          target_audience?: string | null;
+          updated_at?: string;
+          user_stories?: string | null;
+        };
         Update: {
-          acceptance_criteria?: string | null
-          analysis_confidence_score?: number | null
-          appendices?: string[] | null
-          business_goals?: string | null
-          competitive_landscape?: string | null
-          constraints_assumptions?: string | null
-          created_at?: string
-          id?: string
-          key_features?: string | null
-          problem_statement?: string | null
-          project_overview?: string | null
-          proposed_solution?: string | null
-          requirement_id?: string
-          risks_mitigations?: string | null
-          target_audience?: string | null
-          updated_at?: string
-          user_stories?: string | null
-        }
+          acceptance_criteria?: string | null;
+          analysis_confidence_score?: number | null;
+          appendices?: string[] | null;
+          business_goals?: string | null;
+          competitive_landscape?: string | null;
+          constraints_assumptions?: string | null;
+          created_at?: string;
+          id?: string;
+          key_features?: string | null;
+          problem_statement?: string | null;
+          project_overview?: string | null;
+          proposed_solution?: string | null;
+          requirement_id?: string;
+          risks_mitigations?: string | null;
+          target_audience?: string | null;
+          updated_at?: string;
+          user_stories?: string | null;
+        };
         Relationships: [
           {
-            foreignKeyName: "requirement_analysis_requirement_id_fkey"
-            columns: ["requirement_id"]
-            isOneToOne: true
-            referencedRelation: "requirements"
-            referencedColumns: ["id"]
-          },
-        ]
-      }
-      requirement_brd: {
-        Row: {
-          approver_comment: string | null
-          approver_name: string | null
-          brd_document: Json
-          created_at: string | null
-          id: string
-          requirement_id: string | null
-          signed_off_at: string | null
-          status: Database["public"]["Enums"]["brd_status"] | null
-          updated_at: string | null
-        }
-        Insert: {
-          approver_comment?: string | null
-          approver_name?: string | null
-          brd_document: Json
-          created_at?: string | null
-          id?: string
-          requirement_id?: string | null
-          signed_off_at?: string | null
-          status?: Database["public"]["Enums"]["brd_status"] | null
-          updated_at?: string | null
-        }
-        Update: {
-          approver_comment?: string | null
-          approver_name?: string | null
-          brd_document?: Json
-          created_at?: string | null
-          id?: string
-          requirement_id?: string | null
-          signed_off_at?: string | null
-          status?: Database["public"]["Enums"]["brd_status"] | null
-          updated_at?: string | null
-        }
-        Relationships: [
-          {
-            foreignKeyName: "requirement_brd_requirement_id_fkey"
-            columns: ["requirement_id"]
-            isOneToOne: true
-            referencedRelation: "requirements"
-            referencedColumns: ["id"]
-          },
-        ]
-      }
+            foreignKeyName: "requirement_analysis_requirement_id_fkey";
+            columns: ["requirement_id"];
+            isOneToOne: true;
+            referencedRelation: "requirements";
+            referencedColumns: ["id"];
+          }
+        ];
+      };
       requirement_validation: {
         Row: {
-          created_at: string | null
-          id: string
-          readiness_score: number | null
-          recommendations: string[] | null
-          requirement_id: string | null
-          risks: string[] | null
-          status: Database["public"]["Enums"]["requirement_status_enum"] | null
-          strengths: string[] | null
-          updated_at: string | null
-          validation_summary: string | null
-          validation_verdict: string | null
-        }
+          created_at: string | null;
+          id: string;
+          readiness_score: number | null;
+          recommendations: string[] | null;
+          requirement_id: string | null;
+          risks: string[] | null;
+          status: Database["public"]["Enums"]["requirement_status_enum"] | null;
+          strengths: string[] | null;
+          updated_at: string | null;
+          validation_summary: string | null;
+          validation_verdict: string | null;
+        };
         Insert: {
-          created_at?: string | null
-          id?: string
-          readiness_score?: number | null
-          recommendations?: string[] | null
-          requirement_id?: string | null
-          risks?: string[] | null
-          status?: Database["public"]["Enums"]["requirement_status_enum"] | null
-          strengths?: string[] | null
-          updated_at?: string | null
-          validation_summary?: string | null
-          validation_verdict?: string | null
-        }
+          created_at?: string | null;
+          id?: string;
+          readiness_score?: number | null;
+          recommendations?: string[] | null;
+          requirement_id?: string | null;
+          risks?: string[] | null;
+          status?:
+            | Database["public"]["Enums"]["requirement_status_enum"]
+            | null;
+          strengths?: string[] | null;
+          updated_at?: string | null;
+          validation_summary?: string | null;
+          validation_verdict?: string | null;
+        };
         Update: {
-          created_at?: string | null
-          id?: string
-          readiness_score?: number | null
-          recommendations?: string[] | null
-          requirement_id?: string | null
-          risks?: string[] | null
-          status?: Database["public"]["Enums"]["requirement_status_enum"] | null
-          strengths?: string[] | null
-          updated_at?: string | null
-          validation_summary?: string | null
-          validation_verdict?: string | null
-        }
+          created_at?: string | null;
+          id?: string;
+          readiness_score?: number | null;
+          recommendations?: string[] | null;
+          requirement_id?: string | null;
+          risks?: string[] | null;
+          status?:
+            | Database["public"]["Enums"]["requirement_status_enum"]
+            | null;
+          strengths?: string[] | null;
+          updated_at?: string | null;
+          validation_summary?: string | null;
+          validation_verdict?: string | null;
+        };
         Relationships: [
           {
-            foreignKeyName: "requirement_validation_requirement_id_fkey"
-            columns: ["requirement_id"]
-            isOneToOne: true
-            referencedRelation: "requirements"
-            referencedColumns: ["id"]
-          },
-        ]
-      }
+            foreignKeyName: "requirement_validation_requirement_id_fkey";
+            columns: ["requirement_id"];
+            isOneToOne: true;
+            referencedRelation: "requirements";
+            referencedColumns: ["id"];
+          }
+        ];
+      };
       requirements: {
         Row: {
-          company_name: string | null
-          created_at: string | null
-          document_summary: string | null
-          file_urls: string[] | null
-          id: string
-          industry_type: Database["public"]["Enums"]["industry_enum"]
-          input_methods_used: string[] | null
-          project_idea: string | null
-          project_name: string
-          req_id: string | null
-          status: Database["public"]["Enums"]["requirement_status_enum"] | null
-          structured_document: Json | null
-          updated_at: string | null
-          user_id: string | null
-        }
+          company_name: string | null;
+          created_at: string | null;
+          document_summary: string | null;
+          file_urls: string[] | null;
+          id: string;
+          industry_type: Database["public"]["Enums"]["industry_enum"];
+          input_methods_used: string[] | null;
+          project_idea: string | null;
+          project_name: string;
+          req_id: string | null;
+          status: Database["public"]["Enums"]["requirement_status_enum"] | null;
+          updated_at: string | null;
+          user_id: string | null;
+        };
         Insert: {
-          company_name?: string | null
-          created_at?: string | null
-          document_summary?: string | null
-          file_urls?: string[] | null
-          id?: string
-          industry_type: Database["public"]["Enums"]["industry_enum"]
-          input_methods_used?: string[] | null
-          project_idea?: string | null
-          project_name: string
-          req_id?: string | null
-          status?: Database["public"]["Enums"]["requirement_status_enum"] | null
-          structured_document?: Json | null
-          updated_at?: string | null
-          user_id?: string | null
-        }
+          company_name?: string | null;
+          created_at?: string | null;
+          document_summary?: string | null;
+          file_urls?: string[] | null;
+          id?: string;
+          industry_type: Database["public"]["Enums"]["industry_enum"];
+          input_methods_used?: string[] | null;
+          project_idea?: string | null;
+          project_name: string;
+          req_id?: string | null;
+          status?:
+            | Database["public"]["Enums"]["requirement_status_enum"]
+            | null;
+          updated_at?: string | null;
+          user_id?: string | null;
+        };
         Update: {
-          company_name?: string | null
-          created_at?: string | null
-          document_summary?: string | null
-          file_urls?: string[] | null
-          id?: string
-          industry_type?: Database["public"]["Enums"]["industry_enum"]
-          input_methods_used?: string[] | null
-          project_idea?: string | null
-          project_name?: string
-          req_id?: string | null
-          status?: Database["public"]["Enums"]["requirement_status_enum"] | null
-          structured_document?: Json | null
-          updated_at?: string | null
-          user_id?: string | null
-        }
-        Relationships: []
-      }
+          company_name?: string | null;
+          created_at?: string | null;
+          document_summary?: string | null;
+          file_urls?: string[] | null;
+          id?: string;
+          industry_type?: Database["public"]["Enums"]["industry_enum"];
+          input_methods_used?: string[] | null;
+          project_idea?: string | null;
+          project_name?: string;
+          req_id?: string | null;
+          status?:
+            | Database["public"]["Enums"]["requirement_status_enum"]
+            | null;
+          updated_at?: string | null;
+          user_id?: string | null;
+        };
+        Relationships: [];
+      };
       scraped_research_data: {
         Row: {
-          created_at: string
-          id: string
-          raw_content: string
-          requirement_id: string
-          source_id: string
-          status: Database["public"]["Enums"]["scraped_data_status"] | null
-          summary: string | null
-          url: string
-        }
+          created_at: string;
+          id: string;
+          raw_content: string;
+          requirement_id: string;
+          source_id: string;
+          status: Database["public"]["Enums"]["scraped_data_status"] | null;
+          summary: string | null;
+          url: string;
+        };
         Insert: {
-          created_at?: string
-          id?: string
-          raw_content: string
-          requirement_id: string
-          source_id: string
-          status?: Database["public"]["Enums"]["scraped_data_status"] | null
-          summary?: string | null
-          url: string
-        }
+          created_at?: string;
+          id?: string;
+          raw_content: string;
+          requirement_id: string;
+          source_id: string;
+          status?: Database["public"]["Enums"]["scraped_data_status"] | null;
+          summary?: string | null;
+          url: string;
+        };
         Update: {
-          created_at?: string
-          id?: string
-          raw_content?: string
-          requirement_id?: string
-          source_id?: string
-          status?: Database["public"]["Enums"]["scraped_data_status"] | null
-          summary?: string | null
-          url?: string
-        }
+          created_at?: string;
+          id?: string;
+          raw_content?: string;
+          requirement_id?: string;
+          source_id?: string;
+          status?: Database["public"]["Enums"]["scraped_data_status"] | null;
+          summary?: string | null;
+          url?: string;
+        };
         Relationships: [
           {
-            foreignKeyName: "scraped_research_data_requirement_id_fkey"
-            columns: ["requirement_id"]
-            isOneToOne: false
-            referencedRelation: "requirements"
-            referencedColumns: ["id"]
+            foreignKeyName: "scraped_research_data_requirement_id_fkey";
+            columns: ["requirement_id"];
+            isOneToOne: false;
+            referencedRelation: "requirements";
+            referencedColumns: ["id"];
           },
           {
-            foreignKeyName: "scraped_research_data_source_id_fkey"
-            columns: ["source_id"]
-            isOneToOne: false
-            referencedRelation: "market_research_sources"
-            referencedColumns: ["id"]
-          },
-        ]
-      }
+            foreignKeyName: "scraped_research_data_source_id_fkey";
+            columns: ["source_id"];
+            isOneToOne: false;
+            referencedRelation: "market_research_sources";
+            referencedColumns: ["id"];
+          }
+        ];
+      };
       test_cases: {
         Row: {
-          created_at: string | null
-          expected_result: string
-          id: string
-          requirement_id: string
-          steps: string
-          test_title: string
-          type: Database["public"]["Enums"]["test_case_type"]
-          use_case_id: string | null
-        }
+          created_at: string | null;
+          expected_result: string;
+          id: string;
+          requirement_id: string;
+          steps: string;
+          test_title: string;
+          type: Database["public"]["Enums"]["test_case_type"];
+          use_case_id: string | null;
+        };
         Insert: {
-          created_at?: string | null
-          expected_result: string
-          id?: string
-          requirement_id: string
-          steps: string
-          test_title: string
-          type: Database["public"]["Enums"]["test_case_type"]
-          use_case_id?: string | null
-        }
+          created_at?: string | null;
+          expected_result: string;
+          id?: string;
+          requirement_id: string;
+          steps: string;
+          test_title: string;
+          type: Database["public"]["Enums"]["test_case_type"];
+          use_case_id?: string | null;
+        };
         Update: {
-          created_at?: string | null
-          expected_result?: string
-          id?: string
-          requirement_id?: string
-          steps?: string
-          test_title?: string
-          type?: Database["public"]["Enums"]["test_case_type"]
-          use_case_id?: string | null
-        }
+          created_at?: string | null;
+          expected_result?: string;
+          id?: string;
+          requirement_id?: string;
+          steps?: string;
+          test_title?: string;
+          type?: Database["public"]["Enums"]["test_case_type"];
+          use_case_id?: string | null;
+        };
         Relationships: [
           {
-            foreignKeyName: "test_cases_requirement_id_fkey"
-            columns: ["requirement_id"]
-            isOneToOne: false
-            referencedRelation: "requirements"
-            referencedColumns: ["id"]
+            foreignKeyName: "test_cases_requirement_id_fkey";
+            columns: ["requirement_id"];
+            isOneToOne: false;
+            referencedRelation: "requirements";
+            referencedColumns: ["id"];
           },
           {
-            foreignKeyName: "test_cases_use_case_id_fkey"
-            columns: ["use_case_id"]
-            isOneToOne: false
-            referencedRelation: "use_cases"
-            referencedColumns: ["id"]
-          },
-        ]
-      }
+            foreignKeyName: "test_cases_use_case_id_fkey";
+            columns: ["use_case_id"];
+            isOneToOne: false;
+            referencedRelation: "use_cases";
+            referencedColumns: ["id"];
+          }
+        ];
+      };
       use_cases: {
         Row: {
-          actor: string | null
-          alt_flow: string | null
-          created_at: string | null
-          id: string
-          main_flow: string | null
-          outcome: string | null
-          preconditions: string | null
-          requirement_id: string
-          title: string
-          trigger: string | null
-        }
+          actor: string | null;
+          alt_flow: string | null;
+          created_at: string | null;
+          id: string;
+          main_flow: string | null;
+          outcome: string | null;
+          preconditions: string | null;
+          requirement_id: string;
+          title: string;
+          trigger: string | null;
+        };
         Insert: {
-          actor?: string | null
-          alt_flow?: string | null
-          created_at?: string | null
-          id?: string
-          main_flow?: string | null
-          outcome?: string | null
-          preconditions?: string | null
-          requirement_id: string
-          title: string
-          trigger?: string | null
-        }
+          actor?: string | null;
+          alt_flow?: string | null;
+          created_at?: string | null;
+          id?: string;
+          main_flow?: string | null;
+          outcome?: string | null;
+          preconditions?: string | null;
+          requirement_id: string;
+          title: string;
+          trigger?: string | null;
+        };
         Update: {
-          actor?: string | null
-          alt_flow?: string | null
-          created_at?: string | null
-          id?: string
-          main_flow?: string | null
-          outcome?: string | null
-          preconditions?: string | null
-          requirement_id?: string
-          title?: string
-          trigger?: string | null
-        }
+          actor?: string | null;
+          alt_flow?: string | null;
+          created_at?: string | null;
+          id?: string;
+          main_flow?: string | null;
+          outcome?: string | null;
+          preconditions?: string | null;
+          requirement_id?: string;
+          title?: string;
+          trigger?: string | null;
+        };
         Relationships: [
           {
-            foreignKeyName: "use_cases_requirement_id_fkey"
-            columns: ["requirement_id"]
-            isOneToOne: false
-            referencedRelation: "requirements"
-            referencedColumns: ["id"]
-          },
-        ]
-      }
+            foreignKeyName: "use_cases_requirement_id_fkey";
+            columns: ["requirement_id"];
+            isOneToOne: false;
+            referencedRelation: "requirements";
+            referencedColumns: ["id"];
+          }
+        ];
+      };
       user_stories: {
         Row: {
-          actor: string | null
-          created_at: string | null
-          id: string
-          requirement_id: string
-          story: string
-        }
+          actor: string | null;
+          created_at: string | null;
+          id: string;
+          requirement_id: string;
+          story: string;
+        };
         Insert: {
-          actor?: string | null
-          created_at?: string | null
-          id?: string
-          requirement_id: string
-          story: string
-        }
+          actor?: string | null;
+          created_at?: string | null;
+          id?: string;
+          requirement_id: string;
+          story: string;
+        };
         Update: {
-          actor?: string | null
-          created_at?: string | null
-          id?: string
-          requirement_id?: string
-          story?: string
-        }
+          actor?: string | null;
+          created_at?: string | null;
+          id?: string;
+          requirement_id?: string;
+          story?: string;
+        };
         Relationships: [
           {
-            foreignKeyName: "user_stories_requirement_id_fkey"
-            columns: ["requirement_id"]
-            isOneToOne: false
-            referencedRelation: "requirements"
-            referencedColumns: ["id"]
-          },
-        ]
-      }
-    }
+            foreignKeyName: "user_stories_requirement_id_fkey";
+            columns: ["requirement_id"];
+            isOneToOne: false;
+            referencedRelation: "requirements";
+            referencedColumns: ["id"];
+          }
+        ];
+      };
+      requirement_brd: {
+        Row: {
+          id: string;
+          requirement_id: string;
+          status: string;
+          signoff_score: number | null;
+          reviewer_comments: string | null;
+          created_at: string;
+          updated_at: string | null;
+        };
+        Insert: {
+          id?: string;
+          requirement_id: string;
+          status?: string;
+          signoff_score?: number | null;
+          reviewer_comments?: string | null;
+          created_at?: string;
+          updated_at?: string | null;
+        };
+        Update: {
+          id?: string;
+          requirement_id?: string;
+          status?: string;
+          signoff_score?: number | null;
+          reviewer_comments?: string | null;
+          created_at?: string;
+          updated_at?: string | null;
+        };
+        Relationships: [
+          {
+            foreignKeyName: "requirement_brd_requirement_id_fkey";
+            columns: ["requirement_id"];
+            isOneToOne: true;
+            referencedRelation: "requirements";
+            referencedColumns: ["id"];
+          }
+        ];
+      };
+    };
     Views: {
-      [_ in never]: never
-    }
+      [_ in never]: never;
+    };
     Functions: {
-      [_ in never]: never
-    }
+      [_ in never]: never;
+    };
     Enums: {
-      brd_status: "draft" | "ready" | "signed_off" | "rejected" | "error"
-      firecrawl_query_status: "pending" | "searched" | "error"
+      firecrawl_query_status: "pending" | "searched" | "error";
       industry_enum:
         | "technology"
         | "healthcare"
@@ -641,127 +643,126 @@ export type Database = {
         | "energy"
         | "automotive"
         | "HR"
-        | "other"
-      market_research_source_status: "pending_scrape" | "scraped" | "error"
-      requirement_status_enum: "Draft" | "Completed" | "Re_Draft"
-      scraped_data_status: "pending_summary" | "summarized" | "error"
-      test_case_type: "functional" | "edge" | "integration" | "negative"
-    }
+        | "other";
+      market_research_source_status: "pending_scrape" | "scraped" | "error";
+      requirement_status_enum: "Draft" | "Completed" | "Re_Draft";
+      scraped_data_status: "pending_summary" | "summarized" | "error";
+      test_case_type: "functional" | "edge" | "integration" | "negative";
+    };
     CompositeTypes: {
-      [_ in never]: never
-    }
-  }
-}
+      [_ in never]: never;
+    };
+  };
+};
 
-type DefaultSchema = Database[Extract<keyof Database, "public">]
+type DefaultSchema = Database[Extract<keyof Database, "public">];
 
 export type Tables<
   DefaultSchemaTableNameOrOptions extends
     | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
     | { schema: keyof Database },
   TableName extends DefaultSchemaTableNameOrOptions extends {
-    schema: keyof Database
+    schema: keyof Database;
   }
     ? keyof (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
         Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
-    : never = never,
+    : never = never
 > = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
   ? (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
       Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
-      Row: infer R
+      Row: infer R;
     }
     ? R
     : never
   : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
-        DefaultSchema["Views"])
-    ? (DefaultSchema["Tables"] &
-        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
-        Row: infer R
-      }
-      ? R
-      : never
+      DefaultSchema["Views"])
+  ? (DefaultSchema["Tables"] &
+      DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
+      Row: infer R;
+    }
+    ? R
     : never
+  : never;
 
 export type TablesInsert<
   DefaultSchemaTableNameOrOptions extends
     | keyof DefaultSchema["Tables"]
     | { schema: keyof Database },
   TableName extends DefaultSchemaTableNameOrOptions extends {
-    schema: keyof Database
+    schema: keyof Database;
   }
     ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
-    : never = never,
+    : never = never
 > = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
   ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
-      Insert: infer I
+      Insert: infer I;
     }
     ? I
     : never
   : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
-    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
-        Insert: infer I
-      }
-      ? I
-      : never
+  ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
+      Insert: infer I;
+    }
+    ? I
     : never
+  : never;
 
 export type TablesUpdate<
   DefaultSchemaTableNameOrOptions extends
     | keyof DefaultSchema["Tables"]
     | { schema: keyof Database },
   TableName extends DefaultSchemaTableNameOrOptions extends {
-    schema: keyof Database
+    schema: keyof Database;
   }
     ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
-    : never = never,
+    : never = never
 > = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
   ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
-      Update: infer U
+      Update: infer U;
     }
     ? U
     : never
   : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
-    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
-        Update: infer U
-      }
-      ? U
-      : never
+  ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
+      Update: infer U;
+    }
+    ? U
     : never
+  : never;
 
 export type Enums<
   DefaultSchemaEnumNameOrOptions extends
     | keyof DefaultSchema["Enums"]
     | { schema: keyof Database },
   EnumName extends DefaultSchemaEnumNameOrOptions extends {
-    schema: keyof Database
+    schema: keyof Database;
   }
     ? keyof Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
-    : never = never,
+    : never = never
 > = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }
   ? Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
   : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
-    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
-    : never
+  ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
+  : never;
 
 export type CompositeTypes<
   PublicCompositeTypeNameOrOptions extends
     | keyof DefaultSchema["CompositeTypes"]
     | { schema: keyof Database },
   CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
-    schema: keyof Database
+    schema: keyof Database;
   }
     ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
-    : never = never,
+    : never = never
 > = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
   ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
   : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
-    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
-    : never
+  ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
+  : never;
 
 export const Constants = {
   public: {
     Enums: {
-      brd_status: ["draft", "ready", "signed_off", "rejected", "error"],
       firecrawl_query_status: ["pending", "searched", "error"],
       industry_enum: [
         "technology",
@@ -783,4 +784,4 @@ export const Constants = {
       test_case_type: ["functional", "edge", "integration", "negative"],
     },
   },
-} as const
+} as const;
diff --git a/src/pages/dashboard/AISignoff.tsx b/src/pages/dashboard/AISignoff.tsx
index af55135..c237e87 100644
--- a/src/pages/dashboard/AISignoff.tsx
+++ b/src/pages/dashboard/AISignoff.tsx
@@ -1,364 +1,561 @@
-
+import { useSearchParams } from "react-router-dom";
 import { useState, useEffect } from "react";
-import { toast } from "@/components/ui/sonner";
+import AISignoffDashboard from "@/components/signoff/AISignoffDashboard";
+import BRDDisplay, { BRDData } from "@/components/signoff/BRDDisplay";
+import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
+import { Badge } from "@/components/ui/badge";
+import {
+  AlertTriangle,
+  FileText,
+  ClipboardCheck,
+  Calendar,
+  User,
+  Building,
+  FileOutput,
+  Loader2,
+} from "lucide-react";
+import { NotFoundDisplay } from "@/components/market-sense/NotFoundDisplay";
+import { useSignoff } from "@/hooks/useSignoff";
+import {
+  Card,
+  CardContent,
+  CardHeader,
+  CardTitle,
+  CardFooter,
+} from "@/components/ui/card";
+import Loader from "@/components/shared/Loader";
+import { Button } from "@/components/ui/button";
+import { useToast } from "@/components/ui/use-toast";
 import { supabase } from "@/integrations/supabase/client";
-import { useNavigate } from "react-router-dom";
-import { BRDRequirement } from "@/types/smart-signoff";
-import { AISignoffHeader } from "@/components/smart-signoff/AISignoffHeader";
-import { AISignoffStats } from "@/components/smart-signoff/AISignoffStats";
-import { AISignoffTable } from "@/components/smart-signoff/AISignoffTable";
-import { RequirementDetails } from "@/components/smart-signoff/RequirementDetails";
-import { EmptyRequirementState } from "@/components/smart-signoff/EmptyRequirementState";
+import { PostgrestError } from "@supabase/supabase-js";
 
 const AISignoff = () => {
-  const [requirements, setRequirements] = useState<BRDRequirement[]>([]);
-  const [selectedRequirement, setSelectedRequirement] = useState<BRDRequirement | null>(null);
-  const [loading, setLoading] = useState(true);
-  const [filter, setFilter] = useState<string>("all");
-  const navigate = useNavigate();
+  const [searchParams] = useSearchParams();
+  const requirementId = searchParams.get("requirementId");
+  const [error, setError] = useState<string | null>(null);
+  const [isGeneratingBRD, setIsGeneratingBRD] = useState<boolean>(false);
+  const [brdData, setBrdData] = useState<BRDData | null>(null);
+  const [isBrdLoading, setIsBrdLoading] = useState<boolean>(false);
+  const { toast } = useToast();
+
+  console.log("AISignoff - received requirementId:", requirementId);
+
+  // Get the signoff data via our hook
+  const {
+    signoffItems,
+    loading,
+    requirement,
+    signoffDetails,
+    isRequirementLoading,
+    dataFetchAttempted,
+    refreshData,
+  } = useSignoff(requirementId);
 
-  // Fetch requirements with BRD status
+  // Force a refresh when the component mounts
   useEffect(() => {
-    const fetchRequirements = async () => {
-      setLoading(true);
+    console.log("AISignoff component mounted, refreshing data");
+    refreshData();
+  }, [refreshData]);
+
+  // Fetch BRD data when requirementId is available or signoffDetails change
+  useEffect(() => {
+    const fetchBRDData = async () => {
+      if (!requirementId) return;
+
+      setIsBrdLoading(true);
       try {
-        // Fetch requirements with their associated BRD documents
         const { data, error } = await supabase
-          .from('requirements')
-          .select(`
-            id, 
-            req_id,
-            project_name,
-            project_idea,
-            updated_at,
-            requirement_brd (
-              id,
-              status,
-              brd_document,
-              approver_name,
-              approver_comment,
-              signed_off_at
-            )
-          `)
-          .order('updated_at', { ascending: false });
-
-        if (error) {
-          console.error("Error fetching requirements:", error);
-          toast.error("Failed to load requirements");
-          return;
-        }
+          .from("requirement_brd")
+          .select("*")
+          .eq("requirement_id", requirementId)
+          .single();
+
+        if (error) throw error;
+
+        if (data) {
+          // Cast raw data to any to avoid TypeScript errors
+          const rawData = data as any;
 
-        if (!data || data.length === 0) {
-          // If no data from database, use mock data for demonstration
-          setRequirements(mockRequirements);
-        } else {
-          // Transform the data to match our component's expected format
-          const transformedData = data.map((req) => {
-            // Default values if BRD doesn't exist
-            let status: "draft" | "ready" | "signed_off" | "rejected" = "draft";
-            let qualityScore = 85;
-            
-            // Update with actual BRD data if it exists
-            if (req.requirement_brd) {
-              status = req.requirement_brd.status as "draft" | "ready" | "signed_off" | "rejected";
-              // Calculate quality score based on BRD document completeness
-              qualityScore = calculateQualityScore(req.requirement_brd.brd_document);
-            }
-
-            return {
-              id: req.id,
-              req_id: req.req_id || `REQ-${Math.floor(Math.random() * 1000)}`,
-              title: req.project_name,
-              // Use project_idea instead of description as it exists in the database
-              description: req.project_idea || "No description available",
-              status: status,
-              stakeholders: generateMockStakeholders(status),
-              qualityScore: qualityScore,
-              lastUpdated: new Date(req.updated_at).toISOString().split('T')[0],
-              comments: generateMockComments(status),
-              brd_document: req.requirement_brd?.brd_document
-            };
-          });
-          
-          setRequirements(transformedData);
+          // Create BRD data with proper typing
+          const brdData: BRDData = {
+            id: rawData.id,
+            requirement_id: rawData.requirement_id,
+            project_overview: rawData.project_overview || "",
+            problem_statement: rawData.problem_statement || "",
+            proposed_solution: rawData.proposed_solution || "",
+            key_features: rawData.key_features || "",
+            business_goals: rawData.business_goals || "",
+            target_audience: rawData.target_audience || "",
+            market_research_summary: rawData.market_research_summary || "",
+            validation_summary: rawData.validation_summary || "",
+            user_stories_summary: parseArrayField(rawData.user_stories_summary),
+            use_cases_summary: parseArrayField(rawData.use_cases_summary),
+            total_tests: rawData.total_tests || 0,
+            functional_tests: rawData.functional_tests || 0,
+            edge_tests: rawData.edge_tests || 0,
+            negative_tests: rawData.negative_tests || 0,
+            integration_tests: rawData.integration_tests || 0,
+            risks_and_mitigations: parseArrayField(
+              rawData.risks_and_mitigations
+            ),
+            final_recommendation: rawData.final_recommendation || "",
+            ai_signoff_confidence: rawData.ai_signoff_confidence || 0,
+            status: rawData.status || "draft",
+            approver_name: rawData.approver_name || null,
+            approver_comment: rawData.approver_comment || null,
+            signed_off_at: rawData.signed_off_at || null,
+            created_at: rawData.created_at,
+            updated_at: rawData.updated_at || rawData.created_at,
+          };
+
+          setBrdData(brdData);
         }
       } catch (error) {
-        console.error("Error fetching requirements:", error);
-        toast.error("Failed to load requirements");
-        // Fall back to mock data
-        setRequirements(mockRequirements);
+        console.error("Error fetching BRD data:", error);
+        // Don't set an error if the record simply doesn't exist yet
+        if ((error as PostgrestError).code !== "PGRST116") {
+          setError("Failed to load BRD data");
+        }
       } finally {
-        setLoading(false);
+        setIsBrdLoading(false);
       }
     };
 
-    fetchRequirements();
-  }, []);
-
-  // Helper function to generate mock stakeholders based on status
-  const generateMockStakeholders = (status: string) => {
-    const baseStakeholders = [
-      { id: 1, name: "Jane Cooper", role: "Product Manager", approved: true, avatar: "/placeholder.svg" },
-      { id: 2, name: "Robert Fox", role: "Security Lead", approved: status === "signed_off", avatar: "/placeholder.svg" },
-      { id: 3, name: "Emma Wilson", role: "UX Designer", approved: status === "signed_off" || Math.random() > 0.5, avatar: "/placeholder.svg" },
-      { id: 4, name: "Mike Johnson", role: "Engineering Lead", approved: status === "signed_off", avatar: "/placeholder.svg" }
-    ];
-    return baseStakeholders;
-  };
+    // Helper function to parse array fields that might be strings
+    const parseArrayField = (field: unknown): string[] => {
+      if (!field) return [];
+      if (Array.isArray(field)) return field;
+      if (typeof field === "string") {
+        try {
+          return JSON.parse(field);
+        } catch (e) {
+          console.error("Error parsing array field:", e);
+        }
+      }
+      return [];
+    };
 
-  // Helper function to generate mock comments based on status
-  const generateMockComments = (status: string) => {
-    const baseComments = [
-      { id: 1, user: "Jane Cooper", message: "All requirements documented clearly", date: getRandomRecentDate() }
-    ];
-    
-    if (status === "ready" || status === "signed_off") {
-      baseComments.push({ 
-        id: 2, 
-        user: "Robert Fox", 
-        message: "Security requirements are properly addressed", 
-        date: getRandomRecentDate() 
+    if (
+      signoffDetails?.status === "ready" ||
+      signoffDetails?.status === "signed_off" ||
+      signoffDetails?.status === "rejected"
+    ) {
+      fetchBRDData();
+    } else {
+      setBrdData(null);
+    }
+  }, [requirementId, signoffDetails]);
+
+  // Handle BRD Generation
+  const handleGenerateBRD = async () => {
+    if (!requirementId) {
+      toast({
+        title: "Error",
+        description: "Requirement ID is missing",
+        variant: "destructive",
       });
+      return;
     }
-    
-    if (status === "signed_off") {
-      baseComments.push({ 
-        id: 3, 
-        user: "Mike Johnson", 
-        message: "Approved implementation approach", 
-        date: getRandomRecentDate() 
+
+    setIsGeneratingBRD(true);
+
+    try {
+      // If there's already a signoff record, update it, otherwise create one
+      if (signoffDetails) {
+        // Update existing record
+        const { error } = await supabase
+          .from("requirement_brd")
+          .update({
+            status: "ready",
+            updated_at: new Date().toISOString(),
+          })
+          .eq("id", signoffDetails.id);
+
+        if (error) throw error;
+      } else {
+        // Create new record
+        const { error } = await supabase.from("requirement_brd").insert({
+          requirement_id: requirementId,
+          status: "ready",
+        });
+
+        if (error) throw error;
+      }
+
+      toast({
+        title: "Success",
+        description: "BRD generation initiated successfully",
+        variant: "default",
+      });
+
+      // Refresh the data to show updated status
+      refreshData();
+    } catch (error: unknown) {
+      console.error("Error generating BRD:", error);
+      const errorMessage =
+        error instanceof PostgrestError
+          ? error.message
+          : error instanceof Error
+          ? error.message
+          : "Failed to initiate BRD generation";
+
+      toast({
+        title: "Error",
+        description: errorMessage,
+        variant: "destructive",
       });
+    } finally {
+      setIsGeneratingBRD(false);
     }
-    
-    return baseComments;
   };
 
-  // Helper function to get random recent date
-  const getRandomRecentDate = () => {
-    const today = new Date();
-    const daysAgo = Math.floor(Math.random() * 7) + 1;
-    const pastDate = new Date(today);
-    pastDate.setDate(today.getDate() - daysAgo);
-    return pastDate.toISOString().split('T')[0];
-  };
+  // Handle BRD Regeneration
+  const handleRegenerateBRD = async () => {
+    if (!requirementId || !brdData) {
+      toast({
+        title: "Error",
+        description: "Cannot regenerate BRD: missing data",
+        variant: "destructive",
+      });
+      return;
+    }
 
-  // Calculate quality score based on BRD document completeness
-  const calculateQualityScore = (brdDocument: any) => {
-    if (!brdDocument) return 75;
-    
-    let score = 80; // Base score
-    const sections = [
-      'project_overview', 
-      'problem_statement', 
-      'proposed_solution', 
-      'business_goals', 
-      'target_audience',
-      'key_features',
-      'competitive_landscape',
-      'constraints_assumptions',
-      'risks_mitigations',
-      'acceptance_criteria'
-    ];
-    
-    // Add points for each populated section
-    sections.forEach(section => {
-      if (brdDocument[section] && brdDocument[section].length > 10) {
-        score += 2;
-      }
-    });
-    
-    return Math.min(100, score);
+    setIsGeneratingBRD(true);
+
+    try {
+      const { error } = await supabase
+        .from("requirement_brd")
+        .update({
+          status: "ready", // This triggers regeneration
+          updated_at: new Date().toISOString(),
+        })
+        .eq("id", brdData.id);
+
+      if (error) throw error;
+
+      toast({
+        title: "Success",
+        description: "BRD regeneration initiated successfully",
+        variant: "default",
+      });
+
+      // Refresh the data
+      refreshData();
+    } catch (error: unknown) {
+      console.error("Error regenerating BRD:", error);
+      const errorMessage =
+        error instanceof PostgrestError
+          ? error.message
+          : error instanceof Error
+          ? error.message
+          : "Failed to initiate BRD regeneration";
+
+      toast({
+        title: "Error",
+        description: errorMessage,
+        variant: "destructive",
+      });
+    } finally {
+      setIsGeneratingBRD(false);
+    }
   };
 
-  const handleApprove = async (requirementId: string) => {
+  // Handle BRD Sign-off
+  const handleSignOffBRD = async () => {
+    if (!requirementId || !brdData) {
+      toast({
+        title: "Error",
+        description: "Cannot sign off BRD: missing data",
+        variant: "destructive",
+      });
+      return;
+    }
+
     try {
-      // Update the BRD status in the database
       const { error } = await supabase
-        .from('requirement_brd')
+        .from("requirement_brd")
         .update({
-          status: 'signed_off',
-          approver_name: 'Current User', // Ideally this would be the authenticated user's name
-          signed_off_at: new Date().toISOString()
+          status: "signed_off",
+          approver_name: "Current User", // Replace with actual user data
+          signed_off_at: new Date().toISOString(),
+          updated_at: new Date().toISOString(),
         })
-        .eq('requirement_id', requirementId);
-      
-      if (error) {
-        console.error("Error approving requirement:", error);
-        toast.error("Failed to approve requirement");
-        return;
-      }
-      
-      toast.success(`Requirement has been approved`);
-      
-      // Update the requirement status in our state
-      setRequirements(requirements.map(req => 
-        req.id === requirementId ? { ...req, status: "signed_off" as const } : req
-      ));
-      
-      // Update selected requirement if it's the one we're approving
-      if (selectedRequirement && selectedRequirement.id === requirementId) {
-        setSelectedRequirement({ ...selectedRequirement, status: "signed_off" as const });
-      }
-    } catch (error) {
-      console.error("Error approving requirement:", error);
-      toast.error("Failed to approve requirement");
+        .eq("id", brdData.id);
+
+      if (error) throw error;
+
+      toast({
+        title: "Success",
+        description: "BRD signed off successfully",
+        variant: "default",
+      });
+
+      // Refresh the data
+      refreshData();
+    } catch (error: unknown) {
+      console.error("Error signing off BRD:", error);
+      const errorMessage =
+        error instanceof PostgrestError
+          ? error.message
+          : error instanceof Error
+          ? error.message
+          : "Failed to sign off BRD";
+
+      toast({
+        title: "Error",
+        description: errorMessage,
+        variant: "destructive",
+      });
     }
   };
 
-  const handleReject = async (requirementId: string) => {
+  // Handle BRD Rejection
+  const handleRejectBRD = async () => {
+    if (!requirementId || !brdData) {
+      toast({
+        title: "Error",
+        description: "Cannot reject BRD: missing data",
+        variant: "destructive",
+      });
+      return;
+    }
+
+    // In a real app, you would open a modal to collect rejection reason
+    const rejectionComment = "Needs revision"; // Placeholder for demo
+
     try {
-      // Update the BRD status in the database
       const { error } = await supabase
-        .from('requirement_brd')
+        .from("requirement_brd")
         .update({
-          status: 'rejected',
-          approver_name: 'Current User', // Ideally this would be the authenticated user's name
-          signed_off_at: new Date().toISOString()
+          status: "rejected",
+          approver_name: "Current User", // Replace with actual user data
+          approver_comment: rejectionComment,
+          signed_off_at: new Date().toISOString(),
+          updated_at: new Date().toISOString(),
         })
-        .eq('requirement_id', requirementId);
-      
-      if (error) {
-        console.error("Error rejecting requirement:", error);
-        toast.error("Failed to reject requirement");
-        return;
-      }
-      
-      toast.error(`Requirement has been rejected`);
-      
-      // Update the requirement status in our state
-      setRequirements(requirements.map(req => 
-        req.id === requirementId ? { ...req, status: "rejected" as const } : req
-      ));
-      
-      // Update selected requirement if it's the one we're rejecting
-      if (selectedRequirement && selectedRequirement.id === requirementId) {
-        setSelectedRequirement({ ...selectedRequirement, status: "rejected" as const });
-      }
-    } catch (error) {
-      console.error("Error rejecting requirement:", error);
-      toast.error("Failed to reject requirement");
+        .eq("id", brdData.id);
+
+      if (error) throw error;
+
+      toast({
+        title: "BRD Rejected",
+        description: "The BRD has been rejected and sent back for revision",
+        variant: "default",
+      });
+
+      // Refresh the data
+      refreshData();
+    } catch (error: unknown) {
+      console.error("Error rejecting BRD:", error);
+      const errorMessage =
+        error instanceof PostgrestError
+          ? error.message
+          : error instanceof Error
+          ? error.message
+          : "Failed to reject BRD";
+
+      toast({
+        title: "Error",
+        description: errorMessage,
+        variant: "destructive",
+      });
     }
   };
 
-  const handleViewDetails = (requirement: BRDRequirement) => {
-    setSelectedRequirement(requirement);
+  // Handle BRD Export
+  const handleExportBRD = () => {
+    toast({
+      title: "Export Initiated",
+      description: "BRD export functionality would go here",
+      variant: "default",
+    });
   };
 
-  const handleViewBRD = (requirementId: string) => {
-    navigate(`/dashboard/requirements/${requirementId}`);
+  // Render status badge
+  const renderStatusBadge = (status: string | null) => {
+    if (!status) return <Badge variant="warning">Pending</Badge>;
+
+    const normalizedStatus = status.toLowerCase();
+    if (normalizedStatus === "approved" || normalizedStatus === "signed_off") {
+      return <Badge variant="success">Approved</Badge>;
+    } else if (normalizedStatus === "pending" || normalizedStatus === "draft") {
+      return <Badge variant="warning">Pending</Badge>;
+    } else if (normalizedStatus === "rejected") {
+      return <Badge variant="destructive">Rejected</Badge>;
+    } else if (normalizedStatus === "review" || normalizedStatus === "ready") {
+      return <Badge variant="secondary">Under Review</Badge>;
+    } else if (normalizedStatus === "error") {
+      return <Badge variant="destructive">Error</Badge>;
+    }
+    return <Badge variant="secondary">{status}</Badge>;
   };
 
-  // Filter requirements based on selected filter
-  const filteredRequirements = filter === "all"
-    ? requirements
-    : filter === "pending"
-      ? requirements.filter(req => req.status === "ready" || req.status === "draft")
-      : requirements.filter(req => req.status === "signed_off");
+  // Check if the BRD can be generated
+  const canGenerateBRD = () => {
+    if (!requirementId || isRequirementLoading) return false;
+
+    // Allow generation if status is draft or if there's no signoff record yet
+    return !signoffDetails || signoffDetails.status.toLowerCase() === "draft";
+  };
 
-  // Count pending approvals for header
-  const pendingCount = requirements.filter(req => req.status === "ready").length;
+  // Render appropriate view based on requirementId
+  if (requirementId) {
+    // Only show NotFoundDisplay if we've attempted to fetch data and found nothing
+    if (dataFetchAttempted && !isRequirementLoading && !requirement) {
+      console.log("Requirement not found, showing NotFoundDisplay");
+      return <NotFoundDisplay requirementId={requirementId} />;
+    }
 
-  if (loading) {
-    return (
-      <div className="flex items-center justify-center h-64">
-        <div className="flex flex-col items-center space-y-2">
-          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary"></div>
-          <p className="text-muted-foreground">Loading requirements...</p>
+    // Loading state
+    if (isRequirementLoading || isBrdLoading) {
+      return (
+        <div className="flex flex-col items-center justify-center h-64">
+          <Loader size="large" />
+          <p className="mt-4 text-slate-500">Loading requirement details...</p>
         </div>
-      </div>
-    );
-  }
+      );
+    }
 
-  return (
-    <div className="space-y-6">
-      <AISignoffHeader 
-        pendingCount={pendingCount} 
-        onFilterChange={setFilter}
-      />
+    // If we have BRD data and it's in viewable state, show the BRD display
+    if (
+      brdData &&
+      (brdData.status === "ready" ||
+        brdData.status === "signed_off" ||
+        brdData.status === "rejected")
+    ) {
+      return (
+        <BRDDisplay
+          brdData={brdData}
+          projectName={requirement?.project_name}
+          onRegenerate={handleRegenerateBRD}
+          onExport={handleExportBRD}
+          onSignOff={brdData.status === "ready" ? handleSignOffBRD : undefined}
+          onReject={brdData.status === "ready" ? handleRejectBRD : undefined}
+        />
+      );
+    }
 
-      <AISignoffStats requirements={requirements} />
-      
-      <div className="grid gap-6 md:grid-cols-3">
-        <div className="md:col-span-3">
-          <AISignoffTable 
-            requirements={filteredRequirements}
-            onViewDetails={handleViewDetails}
-          />
+    // Default view showing requirement info and BRD generation button
+    return (
+      <div className="space-y-6">
+        <div>
+          <h1 className="text-2xl font-bold">AI Signoff Details</h1>
+          <p className="text-slate-500">
+            Review and manage AI signoff for this requirement
+          </p>
         </div>
 
-        {selectedRequirement && (
-          <div className="md:col-span-3">
-            <RequirementDetails
-              requirement={selectedRequirement}
-              onApprove={handleApprove}
-              onReject={handleReject}
-              onViewBRD={handleViewBRD}
-            />
-          </div>
-        )}
-      </div>
-    </div>
-  );
-};
+        {/* Requirement Info Card */}
+        <Card>
+          <CardHeader className="pb-2">
+            <div className="flex justify-between items-center">
+              <CardTitle className="text-xl">Requirement Information</CardTitle>
+              {renderStatusBadge(signoffDetails?.status || "Pending")}
+            </div>
+          </CardHeader>
+          <CardContent>
+            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+              <div className="flex items-center">
+                <FileText className="h-5 w-5 text-slate-400 mr-2" />
+                <span className="font-medium mr-2">ID:</span>
+                <span>{requirement?.req_id || "N/A"}</span>
+              </div>
+              <div className="flex items-center">
+                <Calendar className="h-5 w-5 text-slate-400 mr-2" />
+                <span className="font-medium mr-2">Created:</span>
+                <span>
+                  {requirement?.created_at
+                    ? new Date(requirement.created_at).toLocaleDateString()
+                    : "N/A"}
+                </span>
+              </div>
+              <div className="flex items-center">
+                <User className="h-5 w-5 text-slate-400 mr-2" />
+                <span className="font-medium mr-2">Project:</span>
+                <span>{requirement?.project_name || "N/A"}</span>
+              </div>
+              <div className="flex items-center">
+                <Building className="h-5 w-5 text-slate-400 mr-2" />
+                <span className="font-medium mr-2">Industry:</span>
+                <span>{requirement?.industry_type || "N/A"}</span>
+              </div>
+            </div>
+          </CardContent>
+          <CardFooter className="flex justify-end">
+            <Button
+              onClick={handleGenerateBRD}
+              disabled={isGeneratingBRD || !canGenerateBRD()}
+              className="bg-gradient-to-r from-primary to-blue-700 hover:opacity-90"
+            >
+              {isGeneratingBRD ? (
+                <>
+                  <Loader2 className="h-4 w-4 animate-spin mr-2" />
+                  Generating...
+                </>
+              ) : (
+                <>
+                  <FileOutput className="h-4 w-4 mr-2" />
+                  Generate Final BRD
+                </>
+              )}
+            </Button>
+          </CardFooter>
+        </Card>
 
-// Mock data for fallback
-const mockRequirements: BRDRequirement[] = [
-  {
-    id: "REQ-001",
-    req_id: "REQ-25-01",
-    title: "User Authentication System",
-    description: "Implement secure user authentication with OAuth 2.0 and JWT",
-    status: "ready",
-    stakeholders: [
-      { id: 1, name: "Jane Cooper", role: "Product Manager", approved: true, avatar: "/placeholder.svg" },
-      { id: 2, name: "Robert Fox", role: "Security Lead", approved: true, avatar: "/placeholder.svg" },
-      { id: 3, name: "Emma Wilson", role: "UX Designer", approved: true, avatar: "/placeholder.svg" },
-      { id: 4, name: "Mike Johnson", role: "Engineering Lead", approved: false, avatar: "/placeholder.svg" }
-    ],
-    qualityScore: 94,
-    lastUpdated: "2025-04-21",
-    comments: [
-      { id: 1, user: "Jane Cooper", message: "All security requirements are met", date: "2025-04-20" },
-      { id: 2, user: "Robert Fox", message: "Approved after security review", date: "2025-04-21" }
-    ]
-  },
-  {
-    id: "REQ-002",
-    req_id: "REQ-25-02",
-    title: "Dashboard Analytics Module",
-    description: "Real-time analytics dashboard with user activity tracking",
-    status: "draft",
-    stakeholders: [
-      { id: 1, name: "Jane Cooper", role: "Product Manager", approved: true, avatar: "/placeholder.svg" },
-      { id: 5, name: "Sarah Miller", role: "Data Scientist", approved: false, avatar: "/placeholder.svg" },
-      { id: 6, name: "David Chen", role: "Frontend Dev", approved: false, avatar: "/placeholder.svg" },
-      { id: 4, name: "Mike Johnson", role: "Engineering Lead", approved: false, avatar: "/placeholder.svg" }
-    ],
-    qualityScore: 86,
-    lastUpdated: "2025-04-19",
-    comments: [
-      { id: 3, user: "Sarah Miller", message: "Need to specify data retention policy", date: "2025-04-19" }
-    ]
-  },
-  {
-    id: "REQ-003",
-    req_id: "REQ-25-03",
-    title: "Payment Processing Integration",
-    description: "Implement secure payment processing with Stripe and PayPal",
-    status: "signed_off",
-    stakeholders: [
-      { id: 1, name: "Jane Cooper", role: "Product Manager", approved: true, avatar: "/placeholder.svg" },
-      { id: 2, name: "Robert Fox", role: "Security Lead", approved: true, avatar: "/placeholder.svg" },
-      { id: 7, name: "Lisa Wong", role: "Financial Officer", approved: true, avatar: "/placeholder.svg" },
-      { id: 4, name: "Mike Johnson", role: "Engineering Lead", approved: true, avatar: "/placeholder.svg" }
-    ],
-    qualityScore: 98,
-    lastUpdated: "2025-04-18",
-    comments: [
-      { id: 4, user: "Lisa Wong", message: "All financial regulations are addressed", date: "2025-04-17" },
-      { id: 5, user: "Mike Johnson", message: "Implementation plan looks good", date: "2025-04-18" }
-    ]
+        {/* Signoff Details */}
+        <Card>
+          <CardHeader className="pb-2">
+            <CardTitle className="text-xl">Signoff Details</CardTitle>
+          </CardHeader>
+          <CardContent>
+            {signoffDetails ? (
+              <div className="space-y-4">
+                <div className="flex items-center">
+                  <ClipboardCheck className="h-5 w-5 text-slate-400 mr-2" />
+                  <span className="font-medium mr-2">Status:</span>
+                  {renderStatusBadge(signoffDetails.status)}
+                </div>
+                {signoffDetails.reviewer_comments && (
+                  <div>
+                    <h4 className="font-medium mb-2">Reviewer Comments:</h4>
+                    <p className="bg-slate-50 p-3 rounded-md border border-slate-200">
+                      {signoffDetails.reviewer_comments}
+                    </p>
+                  </div>
+                )}
+                {!signoffDetails.reviewer_comments && (
+                  <div className="text-slate-500 italic">
+                    No reviewer comments available.
+                  </div>
+                )}
+              </div>
+            ) : (
+              <Alert>
+                <AlertTriangle className="h-4 w-4" />
+                <AlertTitle>No Signoff Data Available</AlertTitle>
+                <AlertDescription>
+                  This requirement has not been submitted for AI signoff yet.
+                </AlertDescription>
+              </Alert>
+            )}
+          </CardContent>
+        </Card>
+      </div>
+    );
+  } else {
+    // Show dashboard when no requirementId is provided
+    console.log(
+      "Rendering AISignoffDashboard with items:",
+      signoffItems.length
+    );
+    return (
+      <AISignoffDashboard
+        signoffItems={signoffItems}
+        loading={loading}
+        dataFetchAttempted={dataFetchAttempted}
+      />
+    );
   }
-];
+};
 
 export default AISignoff;
diff --git a/src/pages/dashboard/SmartSignoff.tsx b/src/pages/dashboard/SmartSignoff.tsx
index e149ffd..e0ab3ec 100644
--- a/src/pages/dashboard/SmartSignoff.tsx
+++ b/src/pages/dashboard/SmartSignoff.tsx
@@ -1,301 +1,16 @@
-
-import { useState, useEffect } from "react";
+import { useState } from "react";
+import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
+import { Button } from "@/components/ui/button";
+import { FileCheck, Check, X, User, Calendar, MessageSquare, Clock } from "lucide-react";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
 import { toast } from "@/components/ui/sonner";
-import { supabase } from "@/integrations/supabase/client";
-import { useNavigate } from "react-router-dom";
-import { BRDRequirement } from "@/types/smart-signoff";
-import { RequirementsList } from "@/components/smart-signoff/RequirementsList";
-import { RequirementDetails } from "@/components/smart-signoff/RequirementDetails";
-import { EmptyRequirementState } from "@/components/smart-signoff/EmptyRequirementState";
-
-const SmartSignoff = () => {
-  const [requirements, setRequirements] = useState<BRDRequirement[]>([]);
-  const [selectedRequirement, setSelectedRequirement] = useState<BRDRequirement | null>(null);
-  const [loading, setLoading] = useState(true);
-  const navigate = useNavigate();
-
-  // Fetch requirements with BRD status
-  useEffect(() => {
-    const fetchRequirements = async () => {
-      setLoading(true);
-      try {
-        // Fetch requirements with their associated BRD documents
-        const { data, error } = await supabase
-          .from('requirements')
-          .select(`
-            id, 
-            req_id,
-            project_name,
-            project_idea,
-            updated_at,
-            requirement_brd (
-              id,
-              status,
-              brd_document,
-              approver_name,
-              approver_comment,
-              signed_off_at
-            )
-          `)
-          .order('updated_at', { ascending: false });
-
-        if (error) {
-          console.error("Error fetching requirements:", error);
-          toast.error("Failed to load requirements");
-          return;
-        }
-
-        if (!data || data.length === 0) {
-          // If no data from database, use mock data for demonstration
-          setRequirements(mockRequirements);
-        } else {
-          // Transform the data to match our component's expected format
-          const transformedData = data.map((req) => {
-            // Default values if BRD doesn't exist
-            let status: "draft" | "ready" | "signed_off" | "rejected" = "draft";
-            let qualityScore = 85;
-            
-            // Update with actual BRD data if it exists
-            if (req.requirement_brd) {
-              status = req.requirement_brd.status as "draft" | "ready" | "signed_off" | "rejected";
-              // Calculate quality score based on BRD document completeness
-              qualityScore = calculateQualityScore(req.requirement_brd.brd_document);
-            }
-
-            return {
-              id: req.id,
-              req_id: req.req_id || `REQ-${Math.floor(Math.random() * 1000)}`,
-              title: req.project_name,
-              // Use project_idea instead of description as it exists in the database
-              description: req.project_idea || "No description available",
-              status: status,
-              stakeholders: generateMockStakeholders(status),
-              qualityScore: qualityScore,
-              lastUpdated: new Date(req.updated_at).toISOString().split('T')[0],
-              comments: generateMockComments(status),
-              brd_document: req.requirement_brd?.brd_document
-            };
-          });
-          
-          setRequirements(transformedData);
-        }
-      } catch (error) {
-        console.error("Error fetching requirements:", error);
-        toast.error("Failed to load requirements");
-        // Fall back to mock data
-        setRequirements(mockRequirements);
-      } finally {
-        setLoading(false);
-      }
-    };
-
-    fetchRequirements();
-  }, []);
-
-  // Helper function to generate mock stakeholders based on status
-  const generateMockStakeholders = (status: string) => {
-    const baseStakeholders = [
-      { id: 1, name: "Jane Cooper", role: "Product Manager", approved: true, avatar: "/placeholder.svg" },
-      { id: 2, name: "Robert Fox", role: "Security Lead", approved: status === "signed_off", avatar: "/placeholder.svg" },
-      { id: 3, name: "Emma Wilson", role: "UX Designer", approved: status === "signed_off" || Math.random() > 0.5, avatar: "/placeholder.svg" },
-      { id: 4, name: "Mike Johnson", role: "Engineering Lead", approved: status === "signed_off", avatar: "/placeholder.svg" }
-    ];
-    return baseStakeholders;
-  };
-
-  // Helper function to generate mock comments based on status
-  const generateMockComments = (status: string) => {
-    const baseComments = [
-      { id: 1, user: "Jane Cooper", message: "All requirements documented clearly", date: getRandomRecentDate() }
-    ];
-    
-    if (status === "ready" || status === "signed_off") {
-      baseComments.push({ 
-        id: 2, 
-        user: "Robert Fox", 
-        message: "Security requirements are properly addressed", 
-        date: getRandomRecentDate() 
-      });
-    }
-    
-    if (status === "signed_off") {
-      baseComments.push({ 
-        id: 3, 
-        user: "Mike Johnson", 
-        message: "Approved implementation approach", 
-        date: getRandomRecentDate() 
-      });
-    }
-    
-    return baseComments;
-  };
-
-  // Helper function to get random recent date
-  const getRandomRecentDate = () => {
-    const today = new Date();
-    const daysAgo = Math.floor(Math.random() * 7) + 1;
-    const pastDate = new Date(today);
-    pastDate.setDate(today.getDate() - daysAgo);
-    return pastDate.toISOString().split('T')[0];
-  };
+import { Badge } from "@/components/ui/badge";
+import { Progress } from "@/components/ui/progress";
 
-  // Calculate quality score based on BRD document completeness
-  const calculateQualityScore = (brdDocument: any) => {
-    if (!brdDocument) return 75;
-    
-    let score = 80; // Base score
-    const sections = [
-      'project_overview', 
-      'problem_statement', 
-      'proposed_solution', 
-      'business_goals', 
-      'target_audience',
-      'key_features',
-      'competitive_landscape',
-      'constraints_assumptions',
-      'risks_mitigations',
-      'acceptance_criteria'
-    ];
-    
-    // Add points for each populated section
-    sections.forEach(section => {
-      if (brdDocument[section] && brdDocument[section].length > 10) {
-        score += 2;
-      }
-    });
-    
-    return Math.min(100, score);
-  };
-
-  const handleApprove = async (requirementId: string) => {
-    try {
-      // Update the BRD status in the database
-      const { error } = await supabase
-        .from('requirement_brd')
-        .update({
-          status: 'signed_off',
-          approver_name: 'Current User', // Ideally this would be the authenticated user's name
-          signed_off_at: new Date().toISOString()
-        })
-        .eq('requirement_id', requirementId);
-      
-      if (error) {
-        console.error("Error approving requirement:", error);
-        toast.error("Failed to approve requirement");
-        return;
-      }
-      
-      toast.success(`Requirement has been approved`);
-      
-      // Update the requirement status in our state
-      setRequirements(requirements.map(req => 
-        req.id === requirementId ? { ...req, status: "signed_off" as const } : req
-      ));
-      
-      // Update selected requirement if it's the one we're approving
-      if (selectedRequirement && selectedRequirement.id === requirementId) {
-        setSelectedRequirement({ ...selectedRequirement, status: "signed_off" as const });
-      }
-    } catch (error) {
-      console.error("Error approving requirement:", error);
-      toast.error("Failed to approve requirement");
-    }
-  };
-
-  const handleReject = async (requirementId: string) => {
-    try {
-      // Update the BRD status in the database
-      const { error } = await supabase
-        .from('requirement_brd')
-        .update({
-          status: 'rejected',
-          approver_name: 'Current User', // Ideally this would be the authenticated user's name
-          signed_off_at: new Date().toISOString()
-        })
-        .eq('requirement_id', requirementId);
-      
-      if (error) {
-        console.error("Error rejecting requirement:", error);
-        toast.error("Failed to reject requirement");
-        return;
-      }
-      
-      toast.error(`Requirement has been rejected`);
-      
-      // Update the requirement status in our state
-      setRequirements(requirements.map(req => 
-        req.id === requirementId ? { ...req, status: "rejected" as const } : req
-      ));
-      
-      // Update selected requirement if it's the one we're rejecting
-      if (selectedRequirement && selectedRequirement.id === requirementId) {
-        setSelectedRequirement({ ...selectedRequirement, status: "rejected" as const });
-      }
-    } catch (error) {
-      console.error("Error rejecting requirement:", error);
-      toast.error("Failed to reject requirement");
-    }
-  };
-
-  const handleSelectRequirement = (requirement: BRDRequirement) => {
-    setSelectedRequirement(requirement);
-  };
-
-  const handleViewBRD = (requirementId: string) => {
-    navigate(`/dashboard/requirements/${requirementId}`);
-  };
-
-  if (loading) {
-    return (
-      <div className="flex items-center justify-center h-64">
-        <div className="flex flex-col items-center space-y-2">
-          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary"></div>
-          <p className="text-muted-foreground">Loading requirements...</p>
-        </div>
-      </div>
-    );
-  }
-
-  return (
-    <div className="space-y-6">
-      <div>
-        <h1 className="text-2xl font-bold">SmartSignoff</h1>
-        <p className="text-muted-foreground">
-          Streamline requirement approvals and track stakeholder sign-offs
-        </p>
-      </div>
-
-      <div className="grid gap-6 md:grid-cols-3">
-        <div className="md:col-span-1">
-          <RequirementsList 
-            requirements={requirements}
-            selectedRequirement={selectedRequirement}
-            onSelectRequirement={handleSelectRequirement}
-          />
-        </div>
-
-        <div className="md:col-span-2">
-          {selectedRequirement ? (
-            <RequirementDetails
-              requirement={selectedRequirement}
-              onApprove={handleApprove}
-              onReject={handleReject}
-              onViewBRD={handleViewBRD}
-            />
-          ) : (
-            <EmptyRequirementState />
-          )}
-        </div>
-      </div>
-    </div>
-  );
-};
-
-// Mock data for fallback
-const mockRequirements: BRDRequirement[] = [
+// Mock data for requirements
+const mockRequirements = [
   {
     id: "REQ-001",
-    req_id: "REQ-25-01",
     title: "User Authentication System",
     description: "Implement secure user authentication with OAuth 2.0 and JWT",
     status: "ready",
@@ -314,10 +29,9 @@ const mockRequirements: BRDRequirement[] = [
   },
   {
     id: "REQ-002",
-    req_id: "REQ-25-02",
     title: "Dashboard Analytics Module",
     description: "Real-time analytics dashboard with user activity tracking",
-    status: "draft",
+    status: "pending",
     stakeholders: [
       { id: 1, name: "Jane Cooper", role: "Product Manager", approved: true, avatar: "/placeholder.svg" },
       { id: 5, name: "Sarah Miller", role: "Data Scientist", approved: false, avatar: "/placeholder.svg" },
@@ -332,10 +46,9 @@ const mockRequirements: BRDRequirement[] = [
   },
   {
     id: "REQ-003",
-    req_id: "REQ-25-03",
     title: "Payment Processing Integration",
     description: "Implement secure payment processing with Stripe and PayPal",
-    status: "signed_off",
+    status: "approved",
     stakeholders: [
       { id: 1, name: "Jane Cooper", role: "Product Manager", approved: true, avatar: "/placeholder.svg" },
       { id: 2, name: "Robert Fox", role: "Security Lead", approved: true, avatar: "/placeholder.svg" },
@@ -351,4 +64,270 @@ const mockRequirements: BRDRequirement[] = [
   }
 ];
 
+const SmartSignoff = () => {
+  const [requirements, setRequirements] = useState(mockRequirements);
+  const [selectedRequirement, setSelectedRequirement] = useState<any>(null);
+
+  const handleApprove = (requirementId: string) => {
+    toast(`Requirement ${requirementId} has been approved.`);
+    
+    // Update the requirement status in our state
+    setRequirements(requirements.map(req => 
+      req.id === requirementId ? { ...req, status: "approved" } : req
+    ));
+    
+    // Update selected requirement if it's the one we're approving
+    if (selectedRequirement && selectedRequirement.id === requirementId) {
+      setSelectedRequirement({ ...selectedRequirement, status: "approved" });
+    }
+  };
+
+  const handleReject = (requirementId: string) => {
+    toast(`Requirement ${requirementId} has been rejected.`);
+    
+    // Update the requirement status in our state
+    setRequirements(requirements.map(req => 
+      req.id === requirementId ? { ...req, status: "rejected" } : req
+    ));
+    
+    // Update selected requirement if it's the one we're rejecting
+    if (selectedRequirement && selectedRequirement.id === requirementId) {
+      setSelectedRequirement({ ...selectedRequirement, status: "rejected" });
+    }
+  };
+
+  const handleSelectRequirement = (requirement: any) => {
+    setSelectedRequirement(requirement);
+  };
+
+  return (
+    <div className="space-y-6">
+      <div>
+        <h1 className="text-2xl font-bold">SmartSignoff</h1>
+        <p className="text-muted-foreground">
+          Streamline requirement approvals and track stakeholder sign-offs
+        </p>
+      </div>
+
+      <div className="grid gap-6 md:grid-cols-3">
+        <div className="md:col-span-1">
+          <Card>
+            <CardHeader>
+              <CardTitle>Requirements</CardTitle>
+              <CardDescription>
+                Requirements pending approval
+              </CardDescription>
+            </CardHeader>
+            <CardContent>
+              <div className="space-y-4">
+                {requirements.map((req) => (
+                  <div 
+                    key={req.id}
+                    className={`p-3 border rounded-md cursor-pointer transition-colors ${
+                      selectedRequirement?.id === req.id 
+                        ? "bg-primary/5 border-primary/30" 
+                        : "hover:bg-muted"
+                    }`}
+                    onClick={() => handleSelectRequirement(req)}
+                  >
+                    <div className="flex items-center justify-between">
+                      <div>
+                        <h4 className="font-medium text-sm">{req.title}</h4>
+                        <div className="flex items-center gap-2 mt-1">
+                          <code className="text-xs bg-muted px-1 py-0.5 rounded">{req.id}</code>
+                          <Badge variant={
+                            req.status === "approved" ? "default" :
+                            req.status === "rejected" ? "destructive" :
+                            req.status === "ready" ? "outline" : "secondary"
+                          }>
+                            {req.status.charAt(0).toUpperCase() + req.status.slice(1)}
+                          </Badge>
+                        </div>
+                      </div>
+                    </div>
+                    
+                    <div className="mt-2 flex items-center gap-1">
+                      <div className="flex -space-x-2">
+                        {req.stakeholders.slice(0, 3).map((stakeholder) => (
+                          <Avatar key={stakeholder.id} className="h-6 w-6 border-2 border-background">
+                            <AvatarImage src={stakeholder.avatar} />
+                            <AvatarFallback className="text-xs">
+                              {stakeholder.name.split(' ').map(n => n[0]).join('')}
+                            </AvatarFallback>
+                          </Avatar>
+                        ))}
+                        {req.stakeholders.length > 3 && (
+                          <div className="h-6 w-6 rounded-full bg-muted flex items-center justify-center text-xs border-2 border-background">
+                            +{req.stakeholders.length - 3}
+                          </div>
+                        )}
+                      </div>
+                      <span className="text-xs text-muted-foreground ml-1">
+                        {req.stakeholders.filter(s => s.approved).length}/{req.stakeholders.length} approved
+                      </span>
+                    </div>
+                  </div>
+                ))}
+              </div>
+            </CardContent>
+          </Card>
+        </div>
+
+        <div className="md:col-span-2">
+          {selectedRequirement ? (
+            <Card>
+              <CardHeader>
+                <div className="flex items-center justify-between">
+                  <div>
+                    <div className="flex items-center gap-2">
+                      <CardTitle>{selectedRequirement.title}</CardTitle>
+                      <Badge variant={
+                        selectedRequirement.status === "approved" ? "default" :
+                        selectedRequirement.status === "rejected" ? "destructive" :
+                        selectedRequirement.status === "ready" ? "outline" : "secondary"
+                      }>
+                        {selectedRequirement.status.charAt(0).toUpperCase() + selectedRequirement.status.slice(1)}
+                      </Badge>
+                    </div>
+                    <CardDescription className="mt-1">
+                      {selectedRequirement.id}
+                    </CardDescription>
+                  </div>
+                  
+                  {selectedRequirement.status === "ready" && (
+                    <div className="flex gap-2">
+                      <Button 
+                        variant="outline" 
+                        size="sm"
+                        className="flex items-center gap-1"
+                        onClick={() => handleReject(selectedRequirement.id)}
+                      >
+                        <X className="h-4 w-4" />
+                        Reject
+                      </Button>
+                      <Button 
+                        size="sm"
+                        className="flex items-center gap-1"
+                        onClick={() => handleApprove(selectedRequirement.id)}
+                      >
+                        <Check className="h-4 w-4" />
+                        Approve
+                      </Button>
+                    </div>
+                  )}
+                </div>
+              </CardHeader>
+              <CardContent className="space-y-4">
+                <div>
+                  <h3 className="text-sm font-medium mb-1">Description</h3>
+                  <p className="text-sm text-muted-foreground">
+                    {selectedRequirement.description}
+                  </p>
+                </div>
+                
+                <div>
+                  <div className="flex items-center justify-between mb-2">
+                    <h3 className="text-sm font-medium">Quality Score</h3>
+                    <span className="text-sm font-medium">
+                      {selectedRequirement.qualityScore}/100
+                    </span>
+                  </div>
+                  <Progress 
+                    value={selectedRequirement.qualityScore} 
+                    className="h-2"
+                    indicatorClassName={`${
+                      selectedRequirement.qualityScore >= 90 ? "bg-green-500" :
+                      selectedRequirement.qualityScore >= 70 ? "bg-yellow-500" :
+                      "bg-red-500"
+                    }`}
+                  />
+                </div>
+                
+                <div>
+                  <h3 className="text-sm font-medium mb-2">Stakeholder Approval</h3>
+                  <div className="space-y-3">
+                    {selectedRequirement.stakeholders.map((stakeholder: any) => (
+                      <div key={stakeholder.id} className="flex items-center justify-between">
+                        <div className="flex items-center gap-3">
+                          <Avatar className="h-8 w-8">
+                            <AvatarImage src={stakeholder.avatar} />
+                            <AvatarFallback>
+                              {stakeholder.name.split(' ').map((n: string) => n[0]).join('')}
+                            </AvatarFallback>
+                          </Avatar>
+                          <div>
+                            <p className="text-sm font-medium">{stakeholder.name}</p>
+                            <p className="text-xs text-muted-foreground">{stakeholder.role}</p>
+                          </div>
+                        </div>
+                        <div>
+                          {stakeholder.approved ? (
+                            <Badge variant="outline" className="bg-green-50 text-green-700 hover:bg-green-50 border-green-200">
+                              <Check className="mr-1 h-3 w-3" /> Approved
+                            </Badge>
+                          ) : (
+                            <Badge variant="outline" className="bg-muted text-muted-foreground">
+                              Pending
+                            </Badge>
+                          )}
+                        </div>
+                      </div>
+                    ))}
+                  </div>
+                </div>
+                
+                <div>
+                  <div className="flex items-center mb-2">
+                    <MessageSquare className="h-4 w-4 mr-1" />
+                    <h3 className="text-sm font-medium">Comments</h3>
+                  </div>
+                  <div className="space-y-3">
+                    {selectedRequirement.comments.map((comment: any) => (
+                      <div key={comment.id} className="bg-muted/50 rounded-md p-3">
+                        <div className="flex items-center justify-between mb-1">
+                          <p className="text-sm font-medium">{comment.user}</p>
+                          <div className="flex items-center text-xs text-muted-foreground">
+                            <Calendar className="h-3 w-3 mr-1" />
+                            {comment.date}
+                          </div>
+                        </div>
+                        <p className="text-sm">{comment.message}</p>
+                      </div>
+                    ))}
+                  </div>
+                </div>
+                
+                <div className="flex items-center justify-between text-xs text-muted-foreground pt-2">
+                  <div className="flex items-center">
+                    <Clock className="h-3 w-3 mr-1" />
+                    Last updated: {selectedRequirement.lastUpdated}
+                  </div>
+                  {selectedRequirement.status === "approved" && (
+                    <div className="flex items-center">
+                      <Check className="h-3 w-3 mr-1 text-green-500" />
+                      Approved
+                    </div>
+                  )}
+                </div>
+              </CardContent>
+            </Card>
+          ) : (
+            <Card>
+              <CardContent className="p-8 flex flex-col items-center justify-center text-center">
+                <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4">
+                  <FileCheck className="h-8 w-8 text-primary" />
+                </div>
+                <h3 className="text-lg font-semibold mb-2">Select a Requirement</h3>
+                <p className="text-muted-foreground max-w-md">
+                  Choose a requirement from the list to view details and approve or reject it.
+                </p>
+              </CardContent>
+            </Card>
+          )}
+        </div>
+      </div>
+    </div>
+  );
+};
+
 export default SmartSignoff;
diff --git a/src/types/smart-signoff.ts b/src/types/smart-signoff.ts
deleted file mode 100644
index b04ac52..0000000
--- a/src/types/smart-signoff.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-
-export interface Stakeholder {
-  id: number;
-  name: string;
-  role: string;
-  approved: boolean;
-  avatar: string;
-}
-
-export interface Comment {
-  id: number;
-  user: string;
-  message: string;
-  date: string;
-}
-
-export interface BRDRequirement {
-  id: string;
-  req_id: string;
-  title: string;
-  description: string;
-  status: "draft" | "ready" | "signed_off" | "rejected";
-  stakeholders: Stakeholder[];
-  qualityScore: number;
-  lastUpdated: string;
-  comments: Comment[];
-  brd_document?: any;
-}
diff --git a/supabase/functions/ai-validator/index.ts.previous b/supabase/functions/ai-validator/index.ts.previous
new file mode 100644
index 0000000..e69de29
diff --git a/supabase/functions/generate-final-brd/index.ts b/supabase/functions/generate-final-brd/index.ts
new file mode 100644
index 0000000..4005ad8
--- /dev/null
+++ b/supabase/functions/generate-final-brd/index.ts
@@ -0,0 +1,279 @@
+import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
+import { createClient } from "https://esm.sh/@supabase/supabase-js@2.7.1";
+
+const corsHeaders = {
+  "Access-Control-Allow-Origin": "*",
+  "Access-Control-Allow-Headers":
+    "authorization, x-client-info, apikey, content-type",
+};
+
+serve(async (req) => {
+  // Handle CORS preflight requests
+  if (req.method === "OPTIONS") {
+    return new Response("ok", { headers: corsHeaders });
+  }
+
+  try {
+    const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
+    const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || "";
+    const openaiApiKey = Deno.env.get("OPENAI_API_KEY") || "";
+
+    if (!openaiApiKey) {
+      throw new Error("OPENAI_API_KEY is not set in environment variables");
+    }
+
+    const supabase = createClient(supabaseUrl, supabaseServiceKey);
+
+    const { projectId } = await req.json();
+
+    if (!projectId) {
+      throw new Error("Project ID is required");
+    }
+
+    // Fetch the requirement details
+    const { data: requirement, error: requirementError } = await supabase
+      .from("requirements")
+      .select("*")
+      .eq("id", projectId)
+      .single();
+
+    if (requirementError) {
+      throw new Error(
+        `Error fetching requirement: ${requirementError.message}`
+      );
+    }
+
+    console.log(
+      `Generating Final BRD for project: ${requirement.project_name}`
+    );
+
+    // Fetch requirement analysis for project overview
+    const { data: analysis, error: analysisError } = await supabase
+      .from("requirement_analysis")
+      .select("*")
+      .eq("requirement_id", projectId)
+      .single();
+
+    if (analysisError) {
+      throw new Error(
+        `Error fetching requirement analysis: ${analysisError.message}`
+      );
+    }
+
+    // Fetch market analysis
+    const { data: marketAnalysis, error: marketError } = await supabase
+      .from("market_analysis")
+      .select("*")
+      .eq("requirement_id", projectId)
+      .single();
+
+    // Fetch validation analysis
+    const { data: validationAnalysis, error: validationError } = await supabase
+      .from("validation_analysis")
+      .select("*")
+      .eq("requirement_id", projectId)
+      .single();
+
+    // Fetch user stories
+    const { data: userStories, error: userStoriesError } = await supabase
+      .from("user_stories")
+      .select("*")
+      .eq("requirement_id", projectId);
+
+    // Fetch use cases
+    const { data: useCases, error: useCasesError } = await supabase
+      .from("use_cases")
+      .select("*")
+      .eq("requirement_id", projectId);
+
+    // Fetch test cases
+    const { data: testCases, error: testCasesError } = await supabase
+      .from("test_cases")
+      .select("*")
+      .eq("requirement_id", projectId);
+
+    // Calculate test case counts by type
+    const testCaseCounts = {
+      total: testCases?.length || 0,
+      functional:
+        testCases?.filter((tc) => tc.test_type === "Functional").length || 0,
+      edge: testCases?.filter((tc) => tc.test_type === "Edge").length || 0,
+      negative:
+        testCases?.filter((tc) => tc.test_type === "Negative").length || 0,
+      integration:
+        testCases?.filter((tc) => tc.test_type === "Integration").length || 0,
+    };
+
+    // Prepare data for OpenAI prompt
+    const promptData = {
+      project_overview: analysis?.project_overview || "",
+      problem_statement: analysis?.problem_statement || "",
+      proposed_solution: analysis?.proposed_solution || "",
+      key_features: analysis?.key_features || "",
+      business_goals: analysis?.business_goals || "",
+      target_audience: analysis?.target_audience || "",
+
+      // Market insights
+      market_trends: marketAnalysis?.market_trends || "",
+      demand_insights: marketAnalysis?.demand_insights || "",
+      top_competitors: marketAnalysis?.top_competitors || "",
+      swot_analysis: marketAnalysis?.swot_analysis || "",
+      market_gap_opportunity: marketAnalysis?.market_gap_opportunity || "",
+
+      // Validation
+      validation_summary: validationAnalysis?.validation_summary || "",
+      strengths: validationAnalysis?.strengths || "",
+      risks: validationAnalysis?.risks || "",
+      recommendations: validationAnalysis?.recommendations || "",
+      readiness_score: validationAnalysis?.readiness_score || 0,
+      validation_verdict: validationAnalysis?.validation_verdict || "",
+
+      // Artifacts
+      user_stories_json: JSON.stringify(userStories || []),
+      use_cases_json: JSON.stringify(useCases || []),
+      test_case_counts: JSON.stringify(testCaseCounts),
+    };
+
+    // Create the prompt for OpenAI
+    const prompt = `
+    You are an experienced product documentation expert.
+    Based on all prior product development artifacts, generate a comprehensive Business Requirements Document (BRD) ready for team review and stakeholder sign-off.
+
+    â ï¸ Do not make up any content. Only use what's given.
+
+    Inputs:
+    Requirement Overview: ${promptData.project_overview}, ${promptData.problem_statement}, ${promptData.proposed_solution}, ${promptData.key_features}, ${promptData.business_goals}, ${promptData.target_audience}
+
+    Market Insights: ${promptData.market_trends}, ${promptData.demand_insights}, ${promptData.top_competitors}, ${promptData.swot_analysis}, ${promptData.market_gap_opportunity}
+
+    Validation Verdict: ${promptData.validation_summary}, ${promptData.strengths}, ${promptData.risks}, ${promptData.recommendations}, ${promptData.readiness_score}, ${promptData.validation_verdict}
+
+    FlowForge Artifacts:
+
+    User Stories: ${promptData.user_stories_json}
+
+    Use Cases: ${promptData.use_cases_json}
+
+    Test Cases (summary): ${promptData.test_case_counts}
+    `;
+
+    // Call OpenAI API to generate the BRD
+    const openAIResponse = await fetch(
+      "https://api.openai.com/v1/chat/completions",
+      {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/json",
+          Authorization: `Bearer ${openaiApiKey}`,
+        },
+        body: JSON.stringify({
+          model: "gpt-4o", // Using a suitable OpenAI model
+          messages: [
+            {
+              role: "user",
+              content: prompt,
+            },
+          ],
+          temperature: 0.7,
+          max_tokens: 4000,
+        }),
+      }
+    );
+
+    if (!openAIResponse.ok) {
+      const errorData = await openAIResponse.json();
+      console.error("OpenAI API Error:", errorData);
+      throw new Error(
+        `OpenAI API error: ${errorData.error?.message || "Unknown error"}`
+      );
+    }
+
+    const openAIData = await openAIResponse.json();
+    console.log("OpenAI response received");
+
+    let brdData;
+    try {
+      // Extract the JSON content from the OpenAI response
+      const content = openAIData.choices[0].message.content;
+
+      // Sometimes OpenAI wraps the JSON in markdown code blocks, so we need to extract it
+      let jsonString = content;
+
+      // Check if the response is wrapped in a code block
+      const jsonMatch = content.match(/```(?:json)?\s*([\s\S]*?)\s*```/);
+      if (jsonMatch && jsonMatch[1]) {
+        jsonString = jsonMatch[1];
+      }
+
+      // Parse the JSON
+      brdData = JSON.parse(jsonString);
+      console.log("Successfully parsed OpenAI response to JSON");
+    } catch (error) {
+      console.error("Error parsing OpenAI response:", error);
+      throw new Error(`Failed to parse BRD data: ${error.message}`);
+    }
+
+    // Add the requirement_id to the BRD data
+    const finalBrdData = {
+      requirement_id: projectId,
+      brd_document: brdData.brd_document, // Make sure OpenAI response matches this structure
+      created_at: new Date().toISOString(),
+    };
+
+    // Check if BRD already exists
+    const { data: existingBrd } = await supabase
+      .from("final_brd")
+      .select("id")
+      .eq("requirement_id", projectId)
+      .maybeSingle();
+
+    let result;
+
+    if (existingBrd) {
+      // Update existing BRD
+      result = await supabase
+        .from("final_brd")
+        .update(finalBrdData)
+        .eq("id", existingBrd.id)
+        .select();
+    } else {
+      // Insert new BRD
+      result = await supabase.from("final_brd").insert(finalBrdData).select();
+    }
+
+    if (result.error) {
+      throw new Error(`Error saving BRD: ${result.error.message}`);
+    }
+
+    // Update the requirement status
+    await supabase
+      .from("requirements")
+      .update({ status: "BRD Generated" })
+      .eq("id", projectId);
+
+    return new Response(
+      JSON.stringify({
+        success: true,
+        message: "Final BRD generated successfully",
+        brd_id: result.data[0].id,
+      }),
+      {
+        headers: { ...corsHeaders, "Content-Type": "application/json" },
+        status: 200,
+      }
+    );
+  } catch (error) {
+    console.error("Error generating final BRD:", error);
+
+    return new Response(
+      JSON.stringify({
+        success: false,
+        error: error.message,
+      }),
+      {
+        headers: { ...corsHeaders, "Content-Type": "application/json" },
+        status: 400,
+      }
+    );
+  }
+});
diff --git a/supabase/functions/process-project/index.ts b/supabase/functions/process-project/index.ts
index f858a48..0377505 100644
--- a/supabase/functions/process-project/index.ts
+++ b/supabase/functions/process-project/index.ts
@@ -182,44 +182,11 @@ serve(async (req) => {
     if (result.error) {
       throw new Error(`Error saving analysis: ${result.error.message}`);
     }
-
-    // Create/Update the BRD document
-    const { data: existingBRD } = await supabase
-      .from("requirement_brd")
-      .select("id")
-      .eq("requirement_id", projectId)
-      .maybeSingle();
-    
-    const brdData = {
-      requirement_id: projectId,
-      brd_document: analysisData,
-      status: "ready" // Set to ready since we just generated it
-    };
-    
-    let brdResult;
     
-    if (existingBRD) {
-      brdResult = await supabase
-        .from("requirement_brd")
-        .update(brdData)
-        .eq("id", existingBRD.id);
-    } else {
-      brdResult = await supabase
-        .from("requirement_brd")
-        .insert(brdData);
-    }
-    
-    if (brdResult.error) {
-      throw new Error(`Error saving BRD: ${brdResult.error.message}`);
-    }
-    
-    // Update the requirement's structured_document field with the BRD data
+    // Finally update the requirement status
     await supabase
       .from("requirements")
-      .update({ 
-        status: "Completed",
-        structured_document: analysisData
-      })
+      .update({ status: "Completed" })
       .eq("id", projectId);
     
     return new Response(
diff --git a/supabase/migrations/20250428_add_requirement_brd.sql b/supabase/migrations/20250428_add_requirement_brd.sql
new file mode 100644
index 0000000..487556d
--- /dev/null
+++ b/supabase/migrations/20250428_add_requirement_brd.sql
@@ -0,0 +1,71 @@
+-- Create requirement_brd table for AI Signoff module
+CREATE TABLE IF NOT EXISTS public.requirement_brd (
+    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
+    requirement_id UUID NOT NULL REFERENCES public.requirements(id) ON DELETE CASCADE,
+    status TEXT NOT NULL DEFAULT 'draft', -- draft, ready, signed_off, rejected, error
+    brd_document JSONB NOT NULL DEFAULT '{}',
+    signoff_score NUMERIC,
+    reviewer_comments TEXT,
+    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
+    updated_at TIMESTAMPTZ,
+    CONSTRAINT requirement_brd_status_check CHECK (status IN ('draft', 'ready', 'signed_off', 'rejected', 'error'))
+);
+
+-- Add comment to the table
+COMMENT ON TABLE public.requirement_brd IS 'Stores signoff data for requirements';
+
+-- Create index on requirement_id for better query performance
+CREATE INDEX IF NOT EXISTS requirement_brd_requirement_id_idx ON public.requirement_brd(requirement_id);
+
+-- Enable Row Level Security
+ALTER TABLE public.requirement_brd ENABLE ROW LEVEL SECURITY;
+
+-- Create RLS policies for mcp
+CREATE POLICY "mcp_view_policy" 
+ON public.requirement_brd
+FOR SELECT 
+USING (
+    auth.role() = 'authenticated' OR 
+    auth.role() = 'service_role'
+);
+
+CREATE POLICY "mcp_insert_policy" 
+ON public.requirement_brd
+FOR INSERT 
+WITH CHECK (
+    auth.role() = 'authenticated' OR 
+    auth.role() = 'service_role'
+);
+
+CREATE POLICY "mcp_update_policy" 
+ON public.requirement_brd
+FOR UPDATE 
+USING (
+    auth.role() = 'authenticated' OR 
+    auth.role() = 'service_role'
+)
+WITH CHECK (
+    auth.role() = 'authenticated' OR 
+    auth.role() = 'service_role'
+);
+
+CREATE POLICY "mcp_delete_policy" 
+ON public.requirement_brd
+FOR DELETE 
+USING (
+    auth.role() = 'authenticated' OR 
+    auth.role() = 'service_role'
+);
+
+-- Trigger to update the updated_at timestamp
+CREATE OR REPLACE FUNCTION update_requirement_brd_updated_at()
+RETURNS TRIGGER AS $$
+BEGIN
+    NEW.updated_at = now();
+    RETURN NEW;
+END;
+$$ LANGUAGE plpgsql;
+
+CREATE TRIGGER update_requirement_brd_timestamp
+BEFORE UPDATE ON public.requirement_brd
+FOR EACH ROW EXECUTE PROCEDURE update_requirement_brd_updated_at(); 
\ No newline at end of file
diff --git a/supabase/migrations/20250429_add_mcp_policy_for_requirement_brd.sql b/supabase/migrations/20250429_add_mcp_policy_for_requirement_brd.sql
new file mode 100644
index 0000000..71b67dc
--- /dev/null
+++ b/supabase/migrations/20250429_add_mcp_policy_for_requirement_brd.sql
@@ -0,0 +1,65 @@
+-- Drop existing policies if they exist
+DROP POLICY IF EXISTS "Users can view own requirement BRDs" ON public.requirement_brd;
+DROP POLICY IF EXISTS "Users can insert own requirement BRDs" ON public.requirement_brd;
+DROP POLICY IF EXISTS "Users can update own requirement BRDs" ON public.requirement_brd;
+DROP POLICY IF EXISTS "Users can delete own requirement BRDs" ON public.requirement_brd;
+
+-- Add mcp policy for viewing
+CREATE POLICY "mcp_view_policy" 
+ON public.requirement_brd
+FOR SELECT 
+USING (
+    auth.role() = 'authenticated' OR 
+    auth.role() = 'service_role' OR
+    EXISTS (
+        SELECT 1 FROM auth.users
+        WHERE auth.uid() = auth.users.id AND auth.users.email LIKE '%@mcp.example.com'
+    )
+);
+
+-- Add mcp policy for inserting
+CREATE POLICY "mcp_insert_policy" 
+ON public.requirement_brd
+FOR INSERT 
+WITH CHECK (
+    auth.role() = 'authenticated' OR 
+    auth.role() = 'service_role' OR
+    EXISTS (
+        SELECT 1 FROM auth.users
+        WHERE auth.uid() = auth.users.id AND auth.users.email LIKE '%@mcp.example.com'
+    )
+);
+
+-- Add mcp policy for updating
+CREATE POLICY "mcp_update_policy" 
+ON public.requirement_brd
+FOR UPDATE 
+USING (
+    auth.role() = 'authenticated' OR 
+    auth.role() = 'service_role' OR
+    EXISTS (
+        SELECT 1 FROM auth.users
+        WHERE auth.uid() = auth.users.id AND auth.users.email LIKE '%@mcp.example.com'
+    )
+)
+WITH CHECK (
+    auth.role() = 'authenticated' OR 
+    auth.role() = 'service_role' OR
+    EXISTS (
+        SELECT 1 FROM auth.users
+        WHERE auth.uid() = auth.users.id AND auth.users.email LIKE '%@mcp.example.com'
+    )
+);
+
+-- Add mcp policy for deleting
+CREATE POLICY "mcp_delete_policy" 
+ON public.requirement_brd
+FOR DELETE 
+USING (
+    auth.role() = 'authenticated' OR 
+    auth.role() = 'service_role' OR
+    EXISTS (
+        SELECT 1 FROM auth.users
+        WHERE auth.uid() = auth.users.id AND auth.users.email LIKE '%@mcp.example.com'
+    )
+); 
\ No newline at end of file
diff --git a/supabase/migrations/20250430_simplify_requirement_brd_policy.sql b/supabase/migrations/20250430_simplify_requirement_brd_policy.sql
new file mode 100644
index 0000000..d23bc6d
--- /dev/null
+++ b/supabase/migrations/20250430_simplify_requirement_brd_policy.sql
@@ -0,0 +1,31 @@
+-- Drop all existing policies on the table first
+DROP POLICY IF EXISTS "mcp_view_policy" ON public.requirement_brd;
+DROP POLICY IF EXISTS "mcp_insert_policy" ON public.requirement_brd;
+DROP POLICY IF EXISTS "mcp_update_policy" ON public.requirement_brd;
+DROP POLICY IF EXISTS "mcp_delete_policy" ON public.requirement_brd;
+
+-- Create a simple policy that allows all authenticated users to do everything
+CREATE POLICY "Enable insert for authenticated users only"
+ON public.requirement_brd
+FOR INSERT
+TO authenticated
+WITH CHECK (true);
+
+CREATE POLICY "Enable select for authenticated users only"
+ON public.requirement_brd
+FOR SELECT
+TO authenticated
+USING (true);
+
+CREATE POLICY "Enable update for authenticated users only"
+ON public.requirement_brd
+FOR UPDATE
+TO authenticated
+USING (true)
+WITH CHECK (true);
+
+CREATE POLICY "Enable delete for authenticated users only"
+ON public.requirement_brd
+FOR DELETE
+TO authenticated
+USING (true); 
\ No newline at end of file
